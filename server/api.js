const express = require('express')
const mongoose = require('mongoose')
const path = require('path')

require('dotenv').config()

const app = express()

console.log('–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...')

app.use(express.json())
app.use(express.static(path.join(__dirname, 'public')))

const MONGO_URI = process.env.MONGO_URI

mongoose
  .connect(MONGO_URI)
  .then(() => console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB'))
  .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err))

mongoose.connection.on('error', err => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB:', err)
})

mongoose.connection.on('disconnected', () => {
  console.warn('‚ö†Ô∏è MongoDB –æ—Ç–∫–ª—é—á–µ–Ω. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...')
})

const userSchema = new mongoose.Schema({
  userId: { type: Number, required: true, unique: true },
  username: { type: String },
  score: { type: Number, default: 0 },
  coins: { type: Number, default: 0 },
  diamonds: { type: Number, default: 0 },
  level: { type: Number, default: 1 },
  xp: { type: Number, default: 0 },
  multiplier: { type: Number, default: 1 },
  multiplierCount: { type: Number, default: 0 },
  autoClickerCount: { type: Number, default: 0 },
  criticalHitCount: { type: Number, default: 0 },
  coinBonusCount: { type: Number, default: 0 },
  xpBoostCount: { type: Number, default: 0 },
  selectedCharacterId: { type: Number, default: null },
  totalClicks: { type: Number, default: 0 },
  achievements: [{
    id: { type: String, required: true },
    unlocked: { type: Boolean, default: false }
  }],
  lastUpdated: { type: Date, default: Date.now }
})

const User = mongoose.model('User', userSchema)

app.use((req, res, next) => {
  console.log(`üì• [${new Date().toISOString()}] ${req.method} ${req.url}`)
  next()
})

app.post('/api/save', async (req, res) => {
  try {
    const { userId, username } = req.body;
    
    if (!userId) {
      return res.status(400).json({ error: 'User ID is required' });
    }
    
    const userData = {
      userId,
      username,
      score: req.body.score,
      coins: req.body.coins,
      diamonds: req.body.diamonds,
      level: req.body.level,
      xp: req.body.xp,
      multiplier: req.body.multiplier,
      multiplierCount: req.body.multiplierCount,
      autoClickerCount: req.body.autoClickerCount,
      criticalHitCount: req.body.criticalHitCount,
      coinBonusCount: req.body.coinBonusCount,
      xpBoostCount: req.body.xpBoostCount,
      selectedCharacterId: req.body.selectedCharacterId,
      totalClicks: req.body.totalClicks,
      achievements: req.body.achievements,
      lastUpdated: new Date()
    };
    
    await User.findOneAndUpdate(
      { userId },
      userData,
      { upsert: true, new: true }
    );
    
    res.json({ success: true });
  } catch (error) {
    console.error('Error saving user data:', error);
    res.status(500).json({ error: 'Failed to save user data' });
  }
});

app.get('/api/load', async (req, res) => {
  try {
    const { userId } = req.query;
    
    if (!userId) {
      return res.status(400).json({ error: 'User ID is required' });
    }
    
    const user = await User.findOne({ userId });
    
    if (!user) {
      return res.json(null);
    }
    
    res.json({
      score: user.score,
      coins: user.coins,
      diamonds: user.diamonds,
      level: user.level,
      xp: user.xp,
      multiplier: user.multiplier,
      multiplierCount: user.multiplierCount,
      autoClickerCount: user.autoClickerCount,
      criticalHitCount: user.criticalHitCount,
      coinBonusCount: user.coinBonusCount,
      xpBoostCount: user.xpBoostCount,
      selectedCharacterId: user.selectedCharacterId,
      totalClicks: user.totalClicks,
      achievements: user.achievements
    });
  } catch (error) {
    console.error('Error loading user data:', error);
    res.status(500).json({ error: 'Failed to load user data' });
  }
});

app.get('/api/leaderboard', async (req, res) => {
  try {
    const leaderboard = await User.find().sort({score: -1}).select('username score')
    res.json(leaderboard)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∫–æ—Ä–¥–æ–≤:', error)
    res.status(500).json({message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'})
  }
})
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'))
})

const PORT = process.env.PORT || 3000
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`)
})
// –ú–æ–¥–µ–ª—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
const chatMessageSchema = new mongoose.Schema({
  userId: Number,
  username: String,
  message: String,
  timestamp: { type: Date, default: Date.now }
});
const ChatMessage = mongoose.model('ChatMessage', chatMessageSchema);

// API –¥–ª—è —á–∞—Ç–∞
app.post('/api/chat/send', async (req, res) => {
  try {
    const { userId, username, message } = req.body;
    console.log('Received chat message request:', { userId, username, message });

    if (!message || !username) {
      console.log('Missing message or username');
      return res.status(400).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–ª–º–∞–∑–æ–≤
    const user = await User.findOne({ userId });
    console.log('Found user:', user ? { userId: user.userId, diamonds: user.diamonds } : 'User not found');
    
    if (!user) {
      console.log('User not found');
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    if (user.diamonds < 10) {
      console.log('Not enough diamonds:', user.diamonds);
      return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–ª–º–∞–∑–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
    }

    // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–º–∞–∑–æ–≤ –Ω–∞ 10
    user.diamonds -= 10;
    await user.save();
    console.log('Diamonds updated:', user.diamonds);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const newMessage = new ChatMessage({
      userId,
      username,
      message: message.substring(0, 200) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    });

    await newMessage.save();
    console.log('Message saved');

    res.status(200).json({ success: true, diamonds: user.diamonds });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/api/chat/messages', async (req, res) => {
  try {
    const messages = await ChatMessage.find()
      .sort({ timestamp: -1 })
      .limit(50)
      .lean();

    // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –±—ã–ª–∏ –≤–Ω–∏–∑—É
    res.json(messages.reverse());
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});
console.log('üõ† –û–∫—Ä—É–∂–µ–Ω–∏–µ:', process.env)
