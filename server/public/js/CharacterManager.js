class CharacterManager {
  constructor(game) {
    this.game = game;
    this.purchasedPremiumCharacters = [];
    
    this.characters = [
      {
        id: 1,
        name: '–°—É—â–µ—Å—Ç–≤–æ',
        entryLevel: 1,
        image: 'images/anything.gif',
        sound: 'sounds/default.mp3'
      },
      {
        id: 2,
        name: '–ú–∞–∫—Å–∏–º',
        entryLevel: 5,
        image: 'images/maksim.gif',
        sound: 'sounds/maksim.m4a',
        description: '–ú–∞—Å—Ç–µ—Ä –∫–ª–∏–∫–æ–≤, –Ω–æ —Ö–ª–µ–± –∑–∞ –Ω–∏–º –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–∏–¥—ë—Ç—Å—è –∏–¥—Ç–∏ —Å–∞–º–æ–º—É'
      },
      {
        id: 3,
        name: '–†–æ–º–∞',
        entryLevel: 10,
        image: 'images/roma.gif',
        sound: 'sounds/roma.m4a',
        description: '–ß–µ—Ä–Ω–∏—á–Ω—ã–π –ø—ë—Å'
      },
      {
        id: 4,
        name: '–ì–ª–µ–±–∞—Å—Ç–∞',
        entryLevel: 15,
        image: 'images/glebasta.jpg',
        sound: 'sounds/default.mp3',
        description: '–ú–æ—Ä—Å–∫–æ–π –≤–æ–ª–∫'
      },
      {
        id: 5,
        name: '–õ—é–±–æ–º–∏—Ä',
        entryLevel: 20,
        image: 'images/lubomir.jpg',
        sound: 'sounds/lubomir.mp3',
        description: '–í–µ—Ç–µ—Ä–∞–Ω –∫–ª–∏–∫–æ–≤, –µ–≥–æ –ø–∞–ª—å—Ü—ã –ø–æ–º–Ω—è—Ç –∫–∞–∂–¥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ, —Ñ–∞–Ω–∞—Ç –°–µ—Ä—å—ë–∑–Ω–æ–≥–æ –°–µ–º–∞'
      },
      {
        id: 6,
        name: '–õ—ë—à–∞',
        entryLevel: 25,
        image: 'images/lesha_dyachkov.jpg',
        sound: 'sounds/lesha_dyachkov.mp3',
        description: '–≠–ª–µ–∫—Ç—Ä–∏–∫ –ø–æ –∫–ª–∏–∫–∞–º, –∑–∞—Ä—è–∂–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–µ–π –∫–∞–∂–¥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ, –±–æ–ª–µ–µ—Ç –∑–∞ –õ–∞–Ω–æ—Å'
      },
      {
        id: 7,
        name: '–î–∏–º–∞',
        entryLevel: 35,
        image: 'images/dima_brusko.jpg',
        sound: 'sounds/dima_brusko.mp3',
        description: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∫–ª–∏–∫–æ–≤, –ø–∏—à–µ—Ç –∫–æ–¥ –Ω–∞–∂–∞—Ç–∏—è–º–∏, –Ω–µ —Ä–∞—Å—Å—Ç–∞—ë—Ç—Å—è —Å –ú–∞–∫–±—É–∫–æ–º'
      },
      {
        id: 8,
        name: '–ñ–µ–∫–∞',
        entryLevel: 50,
        image: 'images/evgeniy.gif',
        sound: 'sounds/jeka_isaenko.mp3',
        animationDuration: 1500,
        description: '–ß–∞—Å–æ–≤—â–∏–∫ –∫–ª–∏–∫–æ–≤, –∫–∞–∂–¥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ —Ç–æ—á–Ω–æ –∫–∞–∫ –º–µ—Ö–∞–Ω–∏–∑–º, –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –ø–æ–¥—É—à–µ–∫'
      },
      {
        id: 9,
        name: '–°–∞–Ω—è',
        entryLevel: 75,
        image: 'images/sasha_isaenko.jpg',
        sound: 'sounds/sasha_isaenko.mp3',
        description: '–ö–∞–º–µ—Ä—â–∏–∫ –∫–ª–∏–∫–æ–≤, —Å–Ω–∏–º–∞–µ—Ç –∫–∞–∂–¥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ, —Ñ–∞–Ω–∞—Ç CS GO'
      },
      {
        id: 10,
        name: '–ñ—É–º–∞',
        entryLevel: 100,
        image: 'images/juma.jpg',
        sound: 'sounds/juma.mp3',
        description: '–ê—Å–ø–∏—Ä–∞–Ω—Ç-–ª–∞–±–æ—Ä–∞–Ω—Ç –∫–ª–∏–∫–æ–≤, –∏—Å—Å–ª–µ–¥—É–µ—Ç –∫–∞–∂–¥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ, –Ω–µ –º–æ–∂–µ—Ç –±–µ–∑ Lays'
      },
      {
        id: 11,
        name: '–ù–∏–∫–∏—Ç–∞',
        entryLevel: 150,
        image: 'images/nikita.jpg',
        sound: 'sounds/nikita.mp3',
        description: '–ë–æ–≥ –∫–ª–∏–∫–æ–≤, –µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è —Ç–≤–æ—Ä—è—Ç —á—É–¥–µ—Å–∞'
      },
      {
        id: 12,
        name: '–î—É–ª—è',
        entryLevel: 999,
        image: 'images/dula.jpg',
        sound: 'sounds/dula.mp3',
        description: 'üòú –õ–µ–≥–µ–Ω–¥–∞ –∫–ª–∏–∫–æ–≤, –µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –æ–∫—É—Ç–∞–Ω—ã —Ç–∞–π–Ω–æ–π'
      }
    ];
    
    // –ü—Ä–µ–º–∏—É–º-–ø–µ—Ä—Å–æ–Ω–∞–∂–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞ –∞–ª–º–∞–∑—ã
    this.premiumCharacters = [
      {
        id: 101,
        name: '–î—Ä–∞–∫–æ–Ω',
        price: 5,
        image: 'images/dragon.png',
        sound: 'sounds/dula.mp3',
        description: 'üî• –ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ —Å—É—â–µ—Å—Ç–≤–æ, —á—å–∏ –∫–ª–∏–∫–∏ —Å–∂–∏–≥–∞—é—Ç –≤—Å—ë –Ω–∞ —Å–≤–æ—ë–º –ø—É—Ç–∏',
        bonus: '+5%'
      },
      {
        id: 102,
        name: '–†–æ–±–æ—Ç',
        price: 10,
        image: 'images/robot.jpg',
        sound: 'sounds/dula.mp3',
        description: 'ü§ñ –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π –∫–ª–∏–∫–µ—Ä —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã',
        bonus: '+10%'
      },
      {
        id: 103,
        name: '–í–æ–ª—à–µ–±–Ω–∏–∫',
        price: 15,
        image: 'images/magic.png',
        sound: 'sounds/dula.mp3',
        description: 'üßô‚Äç‚ôÇÔ∏è –ú–∞—Å—Ç–µ—Ä –º–∞–≥–∏–∏, —á—å–∏ –∫–ª–∏–∫–∏ –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç –º–æ–Ω–µ—Ç—ã –≤ –∞–ª–º–∞–∑—ã',
        bonus: '+15%'
      },
      {
        id: 104,
        name: '–ö–æ—Å–º–æ–Ω–∞–≤—Ç',
        price: 20,
        image: 'images/cosmo.jpg',
        sound: 'sounds/dula.mp3',
        description: 'üöÄ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –∫–æ—Å–º–æ—Å–∞, —á—å–∏ –∫–ª–∏–∫–∏ –¥–æ—Å—Ç–∏–≥–∞—é—Ç –∑–≤—ë–∑–¥',
        bonus: '+20%'
      },
      {
        id: 105,
        name: '–î–∏–Ω–æ–∑–∞–≤—Ä',
        price: 25,
        image: 'images/dino.jpg',
        sound: 'sounds/dula.mp3',
        description: 'ü¶ñ –î—Ä–µ–≤–Ω–µ–µ —Å—É—â–µ—Å—Ç–≤–æ —Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —Å–∏–ª–æ–π –∫–ª–∏–∫–æ–≤',
        bonus: '+25%'
      }
    ];
    
    this.defaultImage = 'images/bogdan.jpg';
    this.defaultSound = 'sounds/bogdan.m4a';
  }
  
  getCharacterForLevel(currentLevel) {
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ entryLevel <= currentLevel –∏ entryLevel –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π
    let unlockedCharacter = null;
    let maxEntryLevel = 0;
    
    for (const character of this.characters) {
      if (currentLevel >= character.entryLevel && character.entryLevel > maxEntryLevel) {
        unlockedCharacter = character;
        maxEntryLevel = character.entryLevel;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ
    return unlockedCharacter || this.characters[0];
  }
  
  getCharacterById(id) {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ä–µ–¥–∏ –æ–±—ã—á–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    const regularCharacter = this.characters.find(character => character.id === id);
    if (regularCharacter) return regularCharacter;
    
    // –ó–∞—Ç–µ–º –∏—â–µ–º —Å—Ä–µ–¥–∏ –ø—Ä–µ–º–∏—É–º-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    return this.premiumCharacters.find(character => character.id === id);
  }
  
  getNextUnlockLevel(currentLevel) {
    // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã
    if (currentLevel === undefined) {
      currentLevel = this.game ? this.game.level : 1;
    }
    
    return this.characters
      .filter(c => c.entryLevel > currentLevel)
      .sort((a, b) => a.entryLevel - b.entryLevel)[0]?.entryLevel;
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ–º–∏—É–º-–ø–µ—Ä—Å–æ–Ω–∞–∂–∏
  getAllPremiumCharacters() {
    return this.premiumCharacters;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫—É–ø–ª–µ–Ω –ª–∏ –ø—Ä–µ–º–∏—É–º-–ø–µ—Ä—Å–æ–Ω–∞–∂
  isPremiumCharacterPurchased(characterId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ —Å–ø–∏—Å–∫–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö
    const isPurchased = Array.isArray(this.purchasedPremiumCharacters) && this.purchasedPremiumCharacters.includes(characterId);
    console.log(`Checking if character ${characterId} is purchased:`, isPurchased);
    console.log('Current purchased characters:', this.purchasedPremiumCharacters);
    return isPurchased;
  }
  
  // –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–º–∏—É–º-–ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö
  addPurchasedPremiumCharacter(characterId) {
    console.log('Adding premium character to purchased list:', characterId);
    console.log('Current purchased characters:', this.purchasedPremiumCharacters);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–º–∏—É–º-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    const premiumCharacter = this.premiumCharacters.find(character => character.id === characterId);
    if (!premiumCharacter) {
      console.warn('Attempted to add non-existent premium character:', characterId);
      return;
    }
    console.log('Found premium character:', premiumCharacter);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
    if (!Array.isArray(this.purchasedPremiumCharacters)) {
      console.log('Initializing purchasedPremiumCharacters as empty array');
      this.purchasedPremiumCharacters = [];
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
    if (!this.purchasedPremiumCharacters.includes(characterId)) {
      this.purchasedPremiumCharacters.push(characterId);
      console.log('Premium character added successfully. Current list:', this.purchasedPremiumCharacters);
    } else {
      console.log('Premium character already in purchased list:', characterId);
    }
  }
  
  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  loadPurchasedPremiumCharacters(purchasedCharacters) {
    console.log('Loading purchased premium characters:', purchasedCharacters);
    console.log('Current purchased characters before loading:', this.purchasedPremiumCharacters);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ purchasedCharacters - —ç—Ç–æ –º–∞—Å—Å–∏–≤
    if (Array.isArray(purchasedCharacters)) {
      console.log('purchasedCharacters is an array with length:', purchasedCharacters.length);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Å–∏–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –ø—Ä–µ–º–∏—É–º-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      const validCharacterIds = purchasedCharacters.filter(id => {
        const exists = this.premiumCharacters.some(character => character.id === id);
        if (!exists) {
          console.warn(`Character ID ${id} not found in premium characters list`);
        }
        return exists;
      });
      
      console.log('Valid premium character IDs:', validCharacterIds);
      console.log('Premium characters list for reference:', this.premiumCharacters);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ ID
      this.purchasedPremiumCharacters = validCharacterIds;
      console.log('Updated purchasedPremiumCharacters:', this.purchasedPremiumCharacters);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–µ–º–∏—É–º-–ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      this.premiumCharacters.forEach(character => {
        const isPurchased = this.isPremiumCharacterPurchased(character.id);
        console.log(`Premium character ${character.name} (ID: ${character.id}) is purchased:`, isPurchased);
      });
    } else {
      console.warn('Invalid purchasedPremiumCharacters data:', purchasedCharacters);
      console.warn('Type of purchasedCharacters:', typeof purchasedCharacters);
      this.purchasedPremiumCharacters = [];
    }
    console.log('Final purchased characters after loading:', this.purchasedPremiumCharacters);
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  getPurchasedPremiumCharacters() {
    console.log('Getting purchased premium characters. Current state:', this.purchasedPremiumCharacters);
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ this.purchasedPremiumCharacters - —ç—Ç–æ –º–∞—Å—Å–∏–≤
    if (!Array.isArray(this.purchasedPremiumCharacters)) {
      console.warn('purchasedPremiumCharacters is not an array, initializing as empty array');
      this.purchasedPremiumCharacters = [];
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Å–∏–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –ø—Ä–µ–º–∏—É–º-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    const validCharacterIds = this.purchasedPremiumCharacters.filter(id => {
      const exists = this.premiumCharacters.some(character => character.id === id);
      if (!exists) {
        console.warn(`Character ID ${id} not found in premium characters list`);
      }
      return exists;
    });
    
    console.log('Valid purchased premium characters:', validCharacterIds);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–µ–º–∏—É–º-–ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    this.premiumCharacters.forEach(character => {
      const isPurchased = this.isPremiumCharacterPurchased(character.id);
      console.log(`Premium character ${character.name} (ID: ${character.id}) is purchased:`, isPurchased);
    });
    
    return validCharacterIds;
  }
  
  isPremiumCharacter(characterId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–º–∏—É–º-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    return this.premiumCharacters.some(character => character.id === characterId);
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  getAvailableCharacters() {
    const currentLevel = this.game ? this.game.level : 1;
    return this.characters.filter(character => character.entryLevel <= currentLevel);
  }
} 