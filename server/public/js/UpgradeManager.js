class UpgradeManager {
  constructor(game) {
    this.game = game;
    
    this.upgrades = [
      {
        id: 'multiplier',
        name: '–°–∞–º–æ–≥–æ–Ω',
        description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –∫–ª–∏–∫. –ß–µ–º –±–æ–ª—å—à–µ —Å–∞–º–æ–≥–æ–Ω–∞, —Ç–µ–º –∫—Ä–µ–ø—á–µ —É–¥–∞—Ä! üç∫',
        icon: 'üç∫',
        baseCost: 25,
        costIncrease: 35,
        effect: 'multiplier',
        maxLevel: 3000
      },
      {
        id: 'auto-click',
        name: '–í–æ–ª–≥–∞',
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∏–∫–∞–µ—Ç –∏ –¥–∞–µ—Ç +15% –∫ –æ—á–∫–∞–º –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å. –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–µ–ª–∞–µ—Ç –∫–ª–∏–∫–∏ –Ω–∞ 3% –±—ã—Å—Ç—Ä–µ–µ! –í–æ–ª–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞ —Ç—ã –æ—Ç–¥—ã—Ö–∞–µ—à—å! üèéÔ∏è',
        icon: 'üèéÔ∏è',
        baseCost: 75,
        costIncrease: 75,
        effect: 'autoClicker',
        maxLevel: 1500
      },
      {
        id: 'critical-hit',
        name: '–ü–æ–¥–∏–∫',
        description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –∏ —Å–∏–ª—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞. –ü–æ–¥–∏–∫ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–¥–∞—Ä, —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ! üí•',
        icon: 'üí•',
        baseCost: 250,
        costIncrease: 250,
        effect: 'criticalHit',
        maxLevel: 750
      },
      {
        id: 'coin-bonus',
        name: '–ë–∞–∑–∞',
        description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∑–∞ –∫–ª–∏–∫. –ë–∞–∑–∞ ‚Äî —ç—Ç–æ –Ω–∞–¥–µ–∂–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞, –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏! üí∞',
        icon: 'üí∞',
        baseCost: 5000,
        costIncrease: 1500,
        effect: 'coinBonus',
        maxLevel: 400
      },
      {
        id: 'xp-boost',
        name: '–°–Ω—é—Å',
        description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –∑–∞ –∫–ª–∏–∫ –Ω–∞ 15% –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å. –°–Ω—é—Å –∑–∞—Ä—è–∂–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —Ä–∞—Å—Ç–∏! üì¶',
        icon: 'üì¶',
        baseCost: 10000,
        costIncrease: 5000,
        effect: 'xpBoost',
        maxLevel: 400
      }
    ];
  }
  
  getUpgradeLevel(upgradeId) {
    switch (upgradeId) {
      case 'multiplier':
        return this.game.multiplierCount || 0;
      case 'auto-click':
        return this.game.autoClickerCount || 0;
      case 'critical-hit':
        return this.game.criticalHitCount || 0;
      case 'coin-bonus':
        return this.game.coinBonusCount || 0;
      case 'xp-boost':
        return this.game.xpBoostCount || 0;
      default:
        return 0;
    }
  }
  
  increaseUpgradeLevel(upgradeId) {
    switch (upgradeId) {
      case 'multiplier':
        this.game.multiplierCount += 1;
        this.game.multiplier += 1;
        break;
      case 'auto-click':
        this.game.autoClickerCount += 1;
        this.applyAutoClickerEffect();
        break;
      case 'critical-hit':
        this.game.criticalHitCount += 1;
        break;
      case 'coin-bonus':
        this.game.coinBonusCount += 1;
        break;
      case 'xp-boost':
        this.game.xpBoostCount += 1;
        break;
    }
  }
  
  applyUpgradeEffect(effectType) {
    switch (effectType) {
      case 'multiplier':
        break;
      case 'autoClicker':
        this.applyAutoClickerEffect();
        break;
      case 'criticalHit':
        break;
      case 'coinBonus':
        break;
      case 'xpBoost':
        break;
      default:
        console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–ª—É—á—à–µ–Ω–∏—è:', effectType);
    }
  }
  
  applyAutoClickerEffect() {
    // Clear any existing interval to prevent multiple auto-clickers
    if (this.autoClickerInterval) {
      clearInterval(this.autoClickerInterval);
      this.autoClickerInterval = null;
    }
    
    // Get auto-clicker level
    const autoClickerLevel = this.getUpgradeLevel('auto-click');
    
    // Only set up interval if auto-clicker level is greater than 0
    if (autoClickerLevel > 0) {
      // Set up interval based on auto-clicker level (faster with higher levels)
      // Each level makes the auto-clicker 3% faster, with a minimum of 300ms
      const intervalTime = Math.max(1000 - (autoClickerLevel * 30), 300);
      
      this.autoClickerInterval = setInterval(() => {
        // Calculate base points with multiplier
        const basePoints = Math.floor(this.game.multiplier);
        
        // Check for critical hit
        const criticalChance = this.getUpgradeLevel('critical-hit') * 0.05; // 5% —à–∞–Ω—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        const isCritical = Math.random() < criticalChance;
        const criticalMultiplier = isCritical ? 2 : 1;
        
        // Get the tap circle element
        const circle = document.getElementById('tap-circle');
        const circleRect = circle.getBoundingClientRect();
        
        // Calculate random position within the circle
        const centerX = circleRect.width / 2;
        const centerY = circleRect.height / 2;
        const radius = Math.min(centerX, centerY) * 0.8; // 80% of radius to keep within circle
        
        const angle = Math.random() * Math.PI * 2;
        const distance = Math.random() * radius;
        const x = centerX + Math.cos(angle) * distance;
        const y = centerY + Math.sin(angle) * distance;
        
        // Add auto-clicker bonus based on level
        // Each level gives a 15% boost to points
        const autoClickerBoost = 1 + (autoClickerLevel * 0.15);
        
        // Calculate final points with all multipliers
        const finalPoints = Math.floor(basePoints * criticalMultiplier * autoClickerBoost);
        
        // Create visual effect
        if (isCritical) {
          this.game.uiManager.createCriticalHitEffect(x, y);
        } else {
          this.game.uiManager.createTapEffect(x, y);
        }
        
        // Update score and coins
        this.game.updateScore(finalPoints);
        
        // Add experience points
        const xpBoost = 1 + (this.getUpgradeLevel('xp-boost') * 0.15); // 15% –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        const levelScaling = 1 + (this.game.level * 0.03); // 3% –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞ –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        const xpGained = Math.max(1, Math.floor(0.15 * levelScaling * xpBoost)); // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º—É–º 1 –æ—á–∫–æ –æ–ø—ã—Ç–∞
        
        this.game.xp += xpGained;
        
        // Check for level up
        this.game.checkLevelUp();
        
        // Increment total clicks counter
        this.game.totalClicks++;
        
        // Check for achievements
        this.game.achievementManager.checkAchievements();
        
        // Update UI
        this.game.uiManager.updateUI();
      }, intervalTime);
    }
  }
  
  buyUpgrade(upgradeId) {
    const upgrade = this.upgrades.find(u => u.id === upgradeId);
    if (!upgrade) {
      this.game.uiManager.showError('–£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }
    
    const currentLevel = this.getUpgradeLevel(upgradeId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    if (currentLevel >= upgrade.maxLevel) {
      this.game.uiManager.showError('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.');
      return;
    }
    
    const cost = upgrade.baseCost + currentLevel * upgrade.costIncrease;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç
    if (this.game.coins >= cost) {
      this.game.coins -= cost;
      this.increaseUpgradeLevel(upgradeId); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —É–ª—É—á—à–µ–Ω–∏—è
      if (upgradeId === 'auto-click') {
        // –î–ª—è –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞ —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
        this.applyAutoClickerEffect();
      } else {
        this.applyUpgradeEffect(upgrade.effect);
      }
      
      this.game.uiManager.updateUI(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    } else {
      this.game.uiManager.showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è.');
    }
  }
  
  renderShop() {
    const $upgradesList = $('#upgrades-list');
    $upgradesList.empty();
    
    this.upgrades.forEach(upgrade => {
      const currentLevel = this.getUpgradeLevel(upgrade.id);
      const cost = upgrade.baseCost + currentLevel * upgrade.costIncrease;
      const isMaxLevel = currentLevel >= upgrade.maxLevel;
      
      const $upgradeElement = $('<div>')
        .addClass('upgrade')
        .attr('data-id', upgrade.id)
        .click(() => this.buyUpgrade(upgrade.id));
      
      $upgradeElement.html(`
        <div class="upgrade-header">
          ${upgrade.icon} ${upgrade.name}
        </div>
        <div class="upgrade-details">
          –¶–µ–Ω–∞: <span class="upgrade-cost">${isMaxLevel ? '‚Äî' : this.game.formatNumber(cost)}</span> ü™ô
          <br>
          –£—Ä–æ–≤–µ–Ω—å: <span class="upgrade-level">${currentLevel}</span> / ${upgrade.maxLevel}
          <br>
          <small>${upgrade.description}</small>
        </div>
      `);
      
      $upgradesList.append($upgradeElement);
    });
  }
} 