let score = 0
let coins = 0
let level = 1
let coin_for_level = 10
let score_for_level = 100
let xp = 0
let multiplier = 1
let autoClickerActive = false
let multiplierCount = 0
let autoClickerCount = 0
let criticalHitCount = 0 // –£—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä"
let coinBonusCount = 0 // –£—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è "–ë–æ–Ω—É—Å –º–æ–Ω–µ—Ç"
let xpBoostCount = 0
let touchStartX = 0
let touchEndX = 0
let selectedCharacter = null

Telegram.WebApp.ready()
Telegram.WebApp.expand()

const tapCircle = document.getElementById('tap-circle')
const configCharacter = {
  characters: [
    {
      id: 1,
      name: '–°—É—â–µ—Å—Ç–≤–æ',
      entryLevel: 1,
      image: 'images/anything.gif',
      sound: 'sounds/default.mp3'
    },
    {
      id: 2,
      name: '–ú–∞–∫—Å–∏–º',
      entryLevel: 5,
      image: 'images/maksim.gif',
      sound: 'sounds/maksim.m4a',
      description: '–õ—é–±–∏—Ç –∏–≥—Ä–∞—Ç—å, –Ω–µ –ª—é–±–∏—Ç —Ö–æ–¥–∏—Ç—å –∑–∞ —Ö–ª–µ–±–æ–º '
    },
    {
      id: 3,
      name: '–†–æ–º–∞',
      entryLevel: 10,
      image: 'images/roma.gif',
      sound: 'sounds/roma.m4a',
      description: '–ß–µ—Ä–Ω–∏—á–Ω—ã–π –ø—ë—Å'
    },
    {
      id: 4,
      name: '–ì–ª–µ–±–∞—Å—Ç–∞',
      entryLevel: 15,
      image: 'images/glebasta.jpg',
      sound: 'sounds/default.mp3',
      description: '–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –ª—é–±–∏—Ç –ö–æ—Ä–æ–ª—è –∏ –®—É—Ç–∞. –ú–æ—Ä—è–∫'
    },
    {
      id: 5,
      name: '–õ—é–±–æ–º–∏—Ä',
      entryLevel: 20,
      image: 'images/lubomir.jpg',
      sound: 'sounds/lubomir.mp3',
      description: '–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –ª—é–±–∏—Ç –°–µ—Ä—å—ë–∑–Ω–æ–≥–æ –°–µ–º–∞. –í–µ—Ç–µ—Ä–∞–Ω'
    },
    {
      id: 6,
      name: '–õ—ë—à–∞',
      entryLevel: 25,
      image: 'images/lesha_dyachkov.jpg',
      sound: 'sounds/lesha_dyachkov.mp3',
      description: '–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –ª—é–±–∏—Ç –õ–∞–Ω–æ—Å. –≠–ª–µ–∫—Ç—Ä–∏–∫'
    },
    {
      id: 7,
      name: '–î–∏–º–∞',
      entryLevel: 35,
      image: 'images/dima_brusko.jpg',
      sound: 'sounds/dima_brusko.mp3',
      description: '–î—É—à–∞ –ê–ô–¢–ò –∫–æ–º–ø–∞–Ω–∏–∏, –ª—é–±–∏—Ç –ú–∞–∫–±—É–∫. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç'
    },
    {
      id: 8,
      name: '–ñ–µ–∫–∞',
      entryLevel: 50,
      image: 'images/evgeniy.gif',
      sound: 'sounds/jeka_isaenko.mp3',
      animationDuration: 1500,
      description: '–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –ª—é–±–∏—Ç –ü–æ–¥—É—à–∫–∏. –ß–∞—Å–æ–≤—â–∏–∫'
    },
    {
      id: 9,
      name: '–°–∞–Ω—è',
      entryLevel: 75,
      image: 'images/sasha_isaenko.jpg',
      sound: 'sounds/sasha_isaenko.mp3',
      description: '–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –ª—é–±–∏—Ç CS GO. –ö–∞–º–µ—Ä—â–∏–∫'
    },
    {
      id: 10,
      name: '–ñ—É–º–∞',
      entryLevel: 100,
      image: 'images/juma.jpg',
      sound: 'sounds/juma.mp3',
      description: '–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –ª—é–±–∏—Ç Lays. –ê—Å–ø–µ—Ä–∞–Ω—Ç–æ-–õ–∞–±–æ—Ä–∞–Ω—Ç–æ'
    },
    {
      id: 11,
      name: '–ù–∏–∫–∏—Ç–∞',
      entryLevel: 150,
      image: 'images/nikita.jpg',
      sound: 'sounds/nikita.mp3',
      description: '–ë–æ–≥'
    },
    {
      id: 12,
      name: '–î—É–ª—è',
      entryLevel: 999,
      image: 'images/dula.jpg',
      sound: 'sounds/dula.mp3',
      description: 'üòú'
    }
  ],
  defaultImage: 'images/bogdan.jpg',
  defaultSound: 'sounds/bogdan.m4a'
}
const shopConfig = {
  upgrades: [
    {
      id: 'multiplier',
      name: '–°–∞–º–æ–≥–æ–Ω',
      description:
        '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∫–ª–∏–∫–∞. –ß–µ–º –±–æ–ª—å—à–µ —Å–∞–º–æ–≥–æ–Ω–∞, —Ç–µ–º –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ –∏ –º–æ–Ω–µ—Ç!',
      baseCost: 50,
      costIncrease: 50,
      effect: 'multiplier',
      maxLevel: 2500,
      icon: 'üç∫'
    },
    {
      id: 'auto-click',
      name: '–í–æ–ª–≥–∞',
      description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∏–∫–∞–µ—Ç –∑–∞ –≤–∞—Å. –í–æ–ª–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —É—Å—Ç–∞–ª–∏, –ø–æ–∫–∞ –≤—ã –æ—Ç–¥—ã—Ö–∞–µ—Ç–µ!',
      baseCost: 100,
      costIncrease: 100,
      effect: 'autoClicker',
      maxLevel: 1000,
      icon: 'üèéÔ∏è'
    },
    {
      id: 'critical-hit',
      name: '–ü–æ–¥–∏–∫',
      description:
        '–®–∞–Ω—Å –Ω–∞–Ω–µ—Å—Ç–∏ –º–æ—â–Ω—ã–π —É–¥–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤ —Ä–∞–∑—ã –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ –∏ –º–æ–Ω–µ—Ç. –ü–æ–¥–∏–∫ ‚Äî —ç—Ç–æ —Å–∏–ª–∞!',
      baseCost: 500,
      costIncrease: 500,
      effect: 'criticalHit',
      maxLevel: 500,
      icon: 'üí•'
    },
    {
      id: 'coin-bonus',
      name: '–ë–∞–∑–∞',
      description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∑–∞ –∫–ª–∏–∫. –ë–∞–∑–∞ ‚Äî —ç—Ç–æ –Ω–∞–¥–µ–∂–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞!',
      baseCost: 10000,
      costIncrease: 2500,
      effect: 'coinBonus',
      maxLevel: 250,
      icon: 'üí∞'
    },
    {
      id: 'xp-boost',
      name: '–°–Ω—é—Å',
      description:
        '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –∑–∞ –∫–ª–∏–∫. –°–Ω—é—Å –∑–∞—Ä—è–∂–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —Ä–∞—Å—Ç–∏!',
      baseCost: 25000,
      costIncrease: 10000,
      effect: 'xpBoost',
      maxLevel: 250,
      icon: 'üì¶'
    }
  ]
}
const $tapSound = $('#tap-sound')[0]
const baseCriticalHitChance = 0.1
const baseCriticalHitMultiplier = 2
const baseCoinBonusMultiplier = 1
function handleTap(event) {
  $tapSound.currentTime = 0
  $tapSound.play()
  createTapEffect(event.clientX, event.clientY)

  let scoreEarned = multiplier
  let coinsEarned = multiplier

  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä
  if (Math.random() < baseCriticalHitChance + criticalHitCount * 0.002) {
    const criticalMultiplier = baseCriticalHitMultiplier + criticalHitCount * 0.02
    scoreEarned *= criticalMultiplier
    coinsEarned *= criticalMultiplier
    createCriticalHitEffect(event.clientX, event.clientY)
  }

  // –ë–æ–Ω—É—Å –º–æ–Ω–µ—Ç –∏ XP
  coinsEarned *= baseCoinBonusMultiplier + coinBonusCount * 0.02

  // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  updateScore(Math.round(scoreEarned))
  updateCoins(Math.round(coinsEarned))

  checkLevelUp()
}

$('#tap-circle').on('click', handleTap)

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
tapCircle.addEventListener('click', handleTap)
const scoreItems = document.querySelectorAll('.score-item')

scoreItems.forEach(item => {
  item.addEventListener('click', () => {
    const tooltip = item.querySelector('.tooltip')
    tooltip.style.visibility = 'visible'
    tooltip.style.opacity = 1

    // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      tooltip.style.visibility = 'hidden'
      tooltip.style.opacity = 0
    }, 2000)
  })
})
function closeShop() {
  $('#shop-modal').hide()
}

function getCurrentCharacter() {
  if (selectedCharacter) {
    return selectedCharacter
  }
  return getCharacterForLevel(level)
}

function checkLevelUp() {
  const levelsGained = Math.floor(xp / (level * score_for_level))
  if (levelsGained > 0) {
    const totalXPNeeded = level * score_for_level * levelsGained
    xp -= totalXPNeeded
    coins += level * coin_for_level * levelsGained

    const newLevel = level + levelsGained
    const newCharacter = configCharacter.characters.find(
      character => character.entryLevel === newLevel
    )
    if (newCharacter) {
      showNewCharacterPopup(newCharacter)
    }

    updateLevel(levelsGained)
    showLevelUpPopup()
    updateUI()
  }
}

function showPopup(elementId, value) {
  const $popup = $(`#${elementId}`)
  $popup
    .text(`+${formatNumber(value)}`)
    .addClass('show')
    .delay(2000)
    .queue(() => $popup.removeClass('show').dequeue())
}

function updateScore(points) {
  xp += points
  score += points
  $('#score').text(formatNumber(score))
  showPopup('score-popup', points)
}

function updateCoins(coinsAdded) {
  coins += coinsAdded
  $('#coins').text(formatNumber(coins))
  showPopup('coins-popup', coinsAdded)
}

function updateLevel(levelsGained) {
  level += levelsGained
  $('#level').text(formatNumber(level))
  showPopup('level-popup', levelsGained)
}
tapCircle.addEventListener('touchstart', event => {
  touchStartX = event.touches[0].clientX
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞—Å–∞–Ω–∏—è
tapCircle.addEventListener('touchend', event => {
  touchEndX = event.changedTouches[0].clientX
  handleSwipe()
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
tapCircle.addEventListener('click', () => {
  if (tapCircle.classList.contains('flipped')) {
    tapCircle.classList.remove('flipped')
  }
})
function handleSwipe() {
  const swipeDistance = touchEndX - touchStartX
  const swipeThreshold = 150 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–≤–∞–π–ø–∞

  if (Math.abs(swipeDistance) > swipeThreshold) {
    if (swipeDistance > 0) {
      // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ
      tapCircle.classList.add('flipped')
    } else {
      // –°–≤–∞–π–ø –≤–ª–µ–≤–æ
      tapCircle.classList.add('flipped')
    }
    updateCharacterDescription() // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–µ
  }
}

function updateCharacterDescription() {
  const character = getCurrentCharacter()
  const descriptionElement = document.getElementById('character-description')
  if (character && descriptionElement) {
    const descriptionText = `${character.name}\n${character.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}`
    descriptionElement.innerHTML = descriptionText.replace(/\n/g, '<br>') // –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ <br>
  }
}
function buyUpgrade(upgradeId) {
  const upgrade = shopConfig.upgrades.find(u => u.id === upgradeId)
  if (!upgrade) {
    showError('–£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
    return
  }

  const currentLevel = getUpgradeLevel(upgradeId)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
  if (currentLevel >= upgrade.maxLevel) {
    showError('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.')
    return
  }

  const cost = upgrade.baseCost + currentLevel * upgrade.costIncrease

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç
  if (coins >= cost) {
    coins -= cost
    increaseUpgradeLevel(upgradeId) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è
    applyUpgradeEffect(upgrade.effect) // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —É–ª—É—á—à–µ–Ω–∏—è
    updateUI() // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  } else {
    showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è.')
  }
}

function getUpgradeLevel(upgradeId) {
  switch (upgradeId) {
    case 'multiplier':
      return multiplierCount || 0
    case 'auto-click':
      return autoClickerCount || 0
    case 'critical-hit':
      return criticalHitCount || 0
    case 'coin-bonus':
      return coinBonusCount || 0
    case 'xp-boost':
      return xpBoostCount || 0
    default:
      return 0
  }
}

function increaseUpgradeLevel(upgradeId) {
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è
  switch (upgradeId) {
    case 'multiplier':
      multiplier += 1
      multiplierCount += 1
      break
    case 'auto-click':
      autoClickerCount += 1
      break
    case 'critical-hit':
      criticalHitCount += 1
      break
    case 'coin-bonus':
      coinBonusCount += 1
      break
    case 'xp-boost':
      xpBoostCount += 1
      break
  }
}

function applyUpgradeEffect(effectType) {
  switch (effectType) {
    case 'multiplier':
      break
    case 'autoClicker':
      applyAutoClickerEffect()
      break
    case 'criticalHit':
      break
    case 'coinBonus':
      break
    case 'xpBoost':
      break
    default:
      console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–ª—É—á—à–µ–Ω–∏—è:', effectType)
  }
}

function applyAutoClickerEffect() {
  if (!autoClickerActive) {
    autoClickerActive = true
    setInterval(() => {
      updateScore(multiplier + autoClickerCount)
      updateCoins(multiplier + autoClickerCount)
      checkLevelUp()
      updateUI()
    }, 1000)
  }
}
function createCriticalHitEffect(x, y) {
  const $effect = $('<div>')
    .addClass('critical-hit-effect')
    .text('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä!')
    .css({left: `${x}px`, top: `${y}px`})
  $('body').append($effect)
  setTimeout(() => $effect.remove(), 1000)
}

function renderShop() {
  const $upgradesList = $('#upgrades-list')
  $upgradesList.empty()

  shopConfig.upgrades.forEach(upgrade => {
    const currentLevel = getUpgradeLevel(upgrade.id)
    const cost = upgrade.baseCost + currentLevel * upgrade.costIncrease
    const isMaxLevel = currentLevel >= upgrade.maxLevel

    const $upgradeElement = $('<div>')
      .addClass('upgrade')
      .attr('data-id', upgrade.id)
      .click(() => buyUpgrade(upgrade.id))

    $upgradeElement.html(`
      <div class="upgrade-header">
        ${upgrade.icon} ${upgrade.name}
      </div>
      <div class="upgrade-details">
        –¶–µ–Ω–∞: <span class="upgrade-cost">${isMaxLevel ? '‚Äî' : formatNumber(cost)}</span> ü™ô
        <br>
        –£—Ä–æ–≤–µ–Ω—å: <span class="upgrade-level">${currentLevel}</span> / ${upgrade.maxLevel}
        <br>
        <small>${upgrade.description}</small>
      </div>
    `)

    $upgradesList.append($upgradeElement)
  })
}

function openShop() {
  renderShop()
  $('#shop-modal').show()
}

function showLeaderboard() {
  saveProgress()
  const currentUser = Telegram.WebApp.initDataUnsafe.user
  const currentUsername = currentUser?.username || 'unknown'

  $.ajax({
    url: '/api/leaderboard',
    method: 'GET',
    dataType: 'json',
    success: function (data) {
      const $leaderboardList = $('#leaderboard-list').empty()

      if (data.length === 0) {
        $leaderboardList.append('<li>–†–µ–∫–æ—Ä–¥—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</li>')
      } else {
        data.forEach((player, index) => {
          const $li = $('<li>')
          const playerUsername = player.username || 'unknown'

          const $usernameLink = $('<a>', {
            href: `https://t.me/${playerUsername}`,
            text: `@${playerUsername}`,
            css: {
              textDecoration: 'none',
              color: '#007BFF',
              cursor: 'pointer'
            },
            target: '_blank'
          })

          const $placeNumber = $('<span>').text(`${index + 1}. `)
          $li.append($placeNumber)

          if (index === 0) {
            $li.append($('<span>').text('ü•á '))
          } else if (index === 1) {
            $li.append($('<span>').text('ü•à '))
          } else if (index === 2) {
            $li.append($('<span>').text('ü•â '))
          }

          $li.append($usernameLink)
          $li.append(`: ${formatNumber(player.score)}`)

          if (playerUsername === currentUsername) {
            $li.css({
              backgroundColor: '#2c3e50',
              fontWeight: 'bold'
            })
          }

          $leaderboardList.append($li)
        })
      }

      $('#leaderboard-modal').show()
    },
    error: function (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∫–æ—Ä–¥–æ–≤:', error)
      $('#leaderboard-list').html('<li>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∫–æ—Ä–¥—ã.</li>')
      $('#leaderboard-modal').show()
    }
  })
}

function closeLeaderboard() {
  $('#leaderboard-modal').hide()
}

window.onclick = event => {
  const leaderboardModal = document.getElementById('leaderboard-modal')
  if (event.target === leaderboardModal) {
    leaderboardModal.style.display = 'none'
  }
}

function saveProgress() {
  const userId = Telegram.WebApp.initDataUnsafe.user?.id || 1
  const username = Telegram.WebApp.initDataUnsafe.user?.username || 'unknown'
  const gameData = {
    score,
    coins,
    level,
    xp,
    multiplier,
    username,
    multiplierCount,
    autoClickerCount,
    criticalHitCount,
    coinBonusCount,
    xpBoostCount,
    selectedCharacter: selectedCharacter ? selectedCharacter.id : null
  }

  localStorage.setItem('gameData', JSON.stringify(gameData))

  $.ajax({
    url: '/api/save',
    method: 'POST',
    contentType: 'application/json',
    data: JSON.stringify({userId, ...gameData}),
    success: function (response) {
      console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', response)
    },
    error: function (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error)
    }
  })
}

function loadProgress() {
  const userId = Telegram.WebApp.initDataUnsafe.user?.id
  if (userId) {
    $.ajax({
      url: '/api/load',
      method: 'POST',
      contentType: 'application/json',
      data: JSON.stringify({userId}),
      dataType: 'json',
      success: function (data) {
        if (data && data.user) {
          const userData = data.user
          score = userData.score || 0
          coins = userData.coins || 0
          level = userData.level || 1
          xp = userData.xp || 0
          multiplier = userData.multiplier || 1
          multiplierCount = userData.multiplierCount || 0
          autoClickerCount = userData.autoClickerCount || 0
          criticalHitCount = userData.criticalHitCount || 0
          coinBonusCount = userData.coinBonusCount || 0
          xpBoostCount = userData.xpBoostCount || 0

          if (userData.selectedCharacter) {
            selectedCharacter = configCharacter.characters.find(
              char => char.id === userData.selectedCharacter
            )
            selectCharacter(selectedCharacter)
          }

          updateUI()

          if (autoClickerCount > 0) {
            applyAutoClickerEffect()
          }
        }
      },
      error: function (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error)
      }
    })
  } else {
    const savedData = localStorage.getItem('gameData')
    if (savedData) {
      const gameData = JSON.parse(savedData)
      score = gameData.score || 0
      coins = gameData.coins || 0
      level = gameData.level || 1
      xp = gameData.xp || 0
      multiplier = gameData.multiplier || 1
      multiplierCount = gameData.multiplierCount || 0
      autoClickerCount = gameData.autoClickerCount || 0
      criticalHitCount = gameData.criticalHitCount || 0
      coinBonusCount = gameData.coinBonusCount || 0
      xpBoostCount = gameData.xpBoostCount || 0

      if (gameData.selectedCharacter) {
        selectedCharacter = configCharacter.characters.find(
          char => char.id === gameData.selectedCharacter
        )
        selectCharacter(selectedCharacter)
      }

      updateUI()

      if (autoClickerCount > 0) {
        applyAutoClickerEffect()
      }
    }
  }
  updateImage()
}

function formatNumber(number) {
  const absNumber = Math.abs(number)
  if (absNumber >= 1e12) return `${(number / 1e12).toFixed(2)}T`
  if (absNumber >= 1e9) return `${(number / 1e9).toFixed(2)}B`
  if (absNumber >= 1e6) return `${(number / 1e6).toFixed(2)}M`
  if (absNumber >= 1e3) return `${(number / 1e3).toFixed(2)}K`
  return number.toString()
}
function updateUI() {
  $('#score').text(formatNumber(score))
  $('#coins').text(formatNumber(coins))
  $('#level').text(formatNumber(level))

  shopConfig.upgrades.forEach(upgrade => {
    const currentLevel = getUpgradeLevel(upgrade.id)
    const cost = upgrade.baseCost + currentLevel * upgrade.costIncrease

    const upgradeElement = $(`.upgrade[data-id="${upgrade.id}"]`)
    if (upgradeElement.length) {
      upgradeElement.find('.upgrade-cost').text(formatNumber(cost))
      upgradeElement.find('.upgrade-level').text(currentLevel)

      if (currentLevel >= upgrade.maxLevel) {
        upgradeElement.addClass('max-level').off('click')
      }
    }
  })
}

function createTapEffect(x, y) {
  const $effect = $('<div>')
    .addClass('tap-effect')
    .css({left: `${x}px`, top: `${y}px`})
  $('body').append($effect)
  setTimeout(() => $effect.remove(), 1000)
}

function updateImage() {
  const character = getCurrentCharacter()
  $('#tap-image').attr('src', character.image)
  $('#tap-sound').attr('src', character.sound)
  if ($('#tap-circle').hasClass('flipped')) updateCharacterDescription()
}

function showNewCharacterPopup(character) {
  $('<div>')
    .addClass('new-character-popup')
    .html(`<h2>üéâ –ù–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂!</h2><p>${character.name}!</p>`)
    .appendTo('body')
    .delay(3000)
    .fadeOut(() => $(this).remove())
}

function getCharacterForLevel(currentLevel) {
  let unlockedCharacter = null
  for (const character of configCharacter.characters) {
    if (currentLevel >= character.entryLevel) {
      unlockedCharacter = character
    } else {
      break // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É—Ä–æ–≤–Ω—é
    }
  }
  return unlockedCharacter
}

function showLevelUpPopup() {
  const $popup = $('<div>').addClass('level-up-popup').html(`
    <h2>üéâ –£—Ä–æ–≤–µ–Ω—å ${level}!</h2>
    <p>+${formatNumber(level * coin_for_level)} –º–æ–Ω–µ—Ç</p>
  `)
  $('body').append($popup)
  setTimeout(() => $popup.remove(), 1000)
}

function showError(message) {
  const $errorElement = $('#error-message')
  if ($errorElement.length) {
    $errorElement.text(message).show()
    setTimeout(() => $errorElement.hide(), 1500)
  }
}

function copyToClipboard(text) {
  navigator.clipboard
    .writeText(text)
    .then(() => {
      showError('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ.')
    })
    .catch(() => {
      showError('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.')
    })
}

function shareProgress() {
  const user = Telegram.WebApp.initDataUnsafe?.user
  if (!user) {
    showError('–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.')
    return
  }

  const shareText = `
üéÆ *–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ Refresher Tapper*:
üî• –°—á–µ—Ç: *${formatNumber(score)}*
ü™ô –ú–æ–Ω–µ—Ç—ã: *${formatNumber(coins)}*
üìà –£—Ä–æ–≤–µ–Ω—å: *${level}*

üí™ –ü–æ–ø—Ä–æ–±—É–π –ø–æ–±–∏—Ç—å –º–æ–π —Ä–µ–∫–æ—Ä–¥!
üëâ –ü–µ—Ä–µ–π–¥–∏ –≤ –±–æ—Ç–∞: @RefresherTapperBot
    `.trim()

  copyToClipboard(shareText)
}

function openCharacterModal() {
  const nextUnlockLevel = configCharacter.characters
    .filter(c => c.entryLevel > level)
    .sort((a, b) => a.entryLevel - b.entryLevel)[0]?.entryLevel

  const $characterList = $('#character-list').empty()

  configCharacter.characters.forEach(character => {
    const $characterItem = $('<div>')
      .addClass('character-item')
      .toggleClass('locked', character.entryLevel > level)
      .html(
        character.entryLevel <= level
          ? `<img src="${character.image}" alt="${character.name}"><span>${character.name}</span>`
          : `<div class="locked-character"></div><span>???</span><small>–û—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ ${character.entryLevel}</small>`
      )
      .on('click', () => character.entryLevel <= level && selectCharacter(character))

    $characterList.append($characterItem)
  })

  $('#next-unlock-info').text(
    nextUnlockLevel
      ? `–°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ ${nextUnlockLevel}`
      : '–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –æ—Ç–∫—Ä—ã—Ç—ã'
  )

  $('#character-modal').show()
}

function closeCharacterModal() {
  $('#character-modal').hide()
}

function selectCharacter(character) {
  selectedCharacter = character
  updateImage()
  closeCharacterModal()
  saveProgress()
}
$(document).ready(function () {
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–µ–Ω—é
  $('#menu-button').on('click', function () {
    $('#menu-modal').show()
  })

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–µ–Ω—é
  $('.close').on('click', function () {
    $('#menu-modal').hide()
  })

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  $(window).on('click', function (event) {
    if ($(event.target).hasClass('modal')) {
      $('#menu-modal').hide()
    }
  })
})
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ confirm
function confirmResetProgress() {
  const customConfirmModal = document.getElementById('custom-confirm-modal')
  customConfirmModal.style.display = 'flex' // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ confirm
function closeCustomConfirmModal() {
  const customConfirmModal = document.getElementById('custom-confirm-modal')
  customConfirmModal.style.display = 'none' // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞, –æ–±–Ω—É–ª–∏—Ç—å"
document.getElementById('confirm-reset').addEventListener('click', function () {
  resetProgress() // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  closeCustomConfirmModal() // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
document.getElementById('cancel-reset').addEventListener('click', function () {
  closeCustomConfirmModal() // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π
})

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function resetProgress() {
  score = 0
  coins = 0
  level = 1
  xp = 0
  multiplier = 1
  multiplierCount = 0
  autoClickerCount = 0
  criticalHitCount = 0
  coinBonusCount = 0
  xpBoostCount = 0
  selectedCharacter = configCharacter.characters.find(char => char.id === 1)
  autoClickerActive = false
  localStorage.removeItem('gameData')

  saveProgress()
  updateUI()
  updateImage()

  showError('–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω!')
}
window.addEventListener('click', function (event) {
  const customConfirmModal = document.getElementById('custom-confirm-modal')
  if (event.target === customConfirmModal) {
    closeCustomConfirmModal()
  }
})
function openChatModal() {
  const chatModal = document.getElementById('chat-modal')
  chatModal.style.display = 'flex'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —á–∞—Ç–∞
function closeChatModal() {
  const chatModal = document.getElementById('chat-modal')
  chatModal.style.display = 'none'
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.addEventListener('click', event => {
  const chatModal = document.getElementById('chat-modal')
  if (event.target === chatModal) {
    closeChatModal()
  }
})
loadProgress()
updateImage()
