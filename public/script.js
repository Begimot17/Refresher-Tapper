let score = 0;
let coins = 0;
let level = 1;
let coin_for_level = 10;
let score_for_level = 100;
let xp = 0;
let multiplier = 1;
let autoClickerActive = false;
let multiplierCount = 0;
let autoClickerCount = 0;
let criticalHitCount = 0; // –£—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä"
let coinBonusCount = 0;   // –£—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è "–ë–æ–Ω—É—Å –º–æ–Ω–µ—Ç"
let xpBoostCount = 0;
let selectedCharacter = null;
let touchStartX = 0;
let touchEndX = 0;


Telegram.WebApp.ready();
Telegram.WebApp.expand();

const tapCircle = document.getElementById('tap-circle');
const scoreElement = document.getElementById('score');
const coinsElement = document.getElementById('coins');
const levelElement = document.getElementById('level');
const configCharacter = {
    characters: [
        {
            name: "–ë–æ–≥–¥–∞–Ω",
            entryLevel: 1,
            image: 'images/bogdan.jpg',
            sound: 'sounds/bogdan.m4a',
            description: "–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –ª—é–±–∏—Ç –í–µ–π–ø—ã. –í–æ–µ–Ω–Ω—ã–π"
        },
        {
            name: "–ì–ª–µ–±–∞—Å—Ç–∞",
            entryLevel: 5,
            image: 'images/glebasta.jpg',
            sound: 'sounds/default.mp3',
            description: "–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –ª—é–±–∏—Ç –ö–æ—Ä–æ–ª—è –∏ –®—É—Ç–∞. –ú–æ—Ä—è–∫"
        },
        {
            name: "–õ—é–±–æ–º–∏—Ä",
            entryLevel: 10,
            image: 'images/lubomir.jpg',
            sound: 'sounds/lubomir.mp3',
            description: "–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –ª—é–±–∏—Ç –°–µ—Ä—å—ë–∑–Ω–æ–≥–æ –°–µ–º–∞. –í–µ—Ç–µ—Ä–∞–Ω"
        },
        {
            name: "–õ—ë—à–∞",
            entryLevel: 20,
            image: 'images/lesha_dyachkov.jpg',
            sound: 'sounds/lesha_dyachkov.mp3',
            description: "–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –ª—é–±–∏—Ç –õ–∞–Ω–æ—Å. –≠–ª–µ–∫—Ç—Ä–∏–∫"
        },
        {
            name: "–î–∏–º–∞",
            entryLevel: 50,
            image: 'images/dima_brusko.jpg',
            sound: 'sounds/dima_brusko.mp3',
            description: "–î—É—à–∞ –ê–ô–¢–ò –∫–æ–º–ø–∞–Ω–∏–∏, –ª—é–±–∏—Ç –ú–∞–∫–±—É–∫. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"
        },
        {
            name: "–ñ–µ–∫–∞",
            entryLevel: 100,
            image: 'images/jeka_isaenko.jpg',
            sound: 'sounds/jeka_isaenko.mp3',
            description: "–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –ª—é–±–∏—Ç –ü–æ–¥—É—à–∫–∏. –ß–∞—Å–æ–≤—â–∏–∫"
        },
        {
            name: "–°–∞–Ω—è",
            entryLevel: 200,
            image: 'images/sasha_isaenko.jpg',
            sound: 'sounds/sasha_isaenko.mp3',
            description: "–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –ª—é–±–∏—Ç CS GO. –ö–∞–º–µ—Ä—â–∏–∫"
        },
        {
            name: "–ñ—É–º–∞",
            entryLevel: 500,
            image: 'images/juma.jpg',
            sound: 'sounds/juma.mp3',
            description: "–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –ª—é–±–∏—Ç Lays. –ê—Å–ø–µ—Ä–∞–Ω—Ç–æ-–õ–∞–±–æ—Ä–∞–Ω—Ç–æ"
        },
    ],
    defaultImage: 'images/bogdan.jpg',
    defaultSound: 'sounds/bogdan.m4a',
};
const shopConfig = {
    upgrades: [
        {
            id: 'multiplier',
            name: '–°–∞–º–æ–≥–æ–Ω',
            description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∫–ª–∏–∫–∞. –ß–µ–º –±–æ–ª—å—à–µ —Å–∞–º–æ–≥–æ–Ω–∞, —Ç–µ–º –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ –∏ –º–æ–Ω–µ—Ç!',
            baseCost: 50,
            costIncrease: 50,
            effect: 'multiplier',
            maxLevel: 500,
            icon: 'üç∫',
        },
        {
            id: 'auto-click',
            name: '–í–æ–ª–≥–∞',
            description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∏–∫–∞–µ—Ç –∑–∞ –≤–∞—Å. –í–æ–ª–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —É—Å—Ç–∞–ª–∏, –ø–æ–∫–∞ –≤—ã –æ—Ç–¥—ã—Ö–∞–µ—Ç–µ!',
            baseCost: 100,
            costIncrease: 100,
            effect: 'autoClicker',
            maxLevel: 500,
            icon: 'üèéÔ∏è',
        },
        {
            id: 'critical-hit',
            name: '–ü–æ–¥–∏–∫',
            description: '–®–∞–Ω—Å –Ω–∞–Ω–µ—Å—Ç–∏ –º–æ—â–Ω—ã–π —É–¥–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤ —Ä–∞–∑—ã –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ –∏ –º–æ–Ω–µ—Ç. –ü–æ–¥–∏–∫ ‚Äî —ç—Ç–æ —Å–∏–ª–∞!',
            baseCost: 500,
            costIncrease: 500,
            effect: 'criticalHit',
            maxLevel: 200,
            icon: 'üí•',
        },
        {
            id: 'coin-bonus',
            name: '–ë–∞–∑–∞',
            description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∑–∞ –∫–ª–∏–∫. –ë–∞–∑–∞ ‚Äî —ç—Ç–æ –Ω–∞–¥–µ–∂–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞!',
            baseCost: 10000,
            costIncrease: 2500,
            effect: 'coinBonus',
            maxLevel: 200,
            icon: 'üí∞',
        },
        {
            id: 'xp-boost',
            name: '–°–Ω—é—Å',
            description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –∑–∞ –∫–ª–∏–∫. –°–Ω—é—Å –∑–∞—Ä—è–∂–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —Ä–∞—Å—Ç–∏!',
            baseCost: 25000,
            costIncrease: 10000,
            effect: 'xpBoost',
            maxLevel: 100,
            icon: 'üì¶',
        },
    ],
};
const tapSound = document.getElementById('tap-sound');
function handleTap(event) {
    tapSound.currentTime = 0;
    tapSound.play();
    createTapEffect(event.clientX, event.clientY);

    // –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    let scoreEarned = multiplier;
    let coinsEarned = multiplier;
    let xpEarned = multiplier;

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä
    const criticalHitChance = 0.1 + (criticalHitCount * 0.05);
    const criticalHitMultiplier = 2 + (criticalHitCount * 0.5);
    if (Math.random() < criticalHitChance) {
        scoreEarned *= criticalHitMultiplier;
        coinsEarned *= criticalHitMultiplier;
        xpEarned *= criticalHitMultiplier;
        createCriticalHitEffect(event.clientX, event.clientY);
    }

    // –ë–æ–Ω—É—Å –º–æ–Ω–µ—Ç
    const coinBonusMultiplier = 1 + (coinBonusCount * 0.2);
    coinsEarned *= coinBonusMultiplier;

    // –£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
    const xpBoostMultiplier = 1 + (xpBoostCount * 0.3);
    xpEarned *= xpBoostMultiplier;

    // –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
    coinsEarned = Math.round(coinsEarned); // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ
    xpEarned = Math.round(xpEarned); // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    updateScore(scoreEarned);
    updateCoins(coinsEarned);
    xp += xpEarned;

    checkLevelUp();
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
tapCircle.addEventListener('click', handleTap);
const scoreItems = document.querySelectorAll('.score-item');

scoreItems.forEach(item => {
    item.addEventListener('click', () => {
        const tooltip = item.querySelector('.tooltip');
        tooltip.style.visibility = 'visible';
        tooltip.style.opacity = 1;

        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            tooltip.style.visibility = 'hidden';
            tooltip.style.opacity = 0;
        }, 2000);
    });
});
function closeShop() {
    document.getElementById('shop-modal').style.display = 'none';
}

function getCurrentCharacter() {
    if (selectedCharacter) {
        return selectedCharacter;
    }
    return getCharacterForLevel(level);
}

function checkLevelUp() {
    const neededXP = level * score_for_level;
    if (xp >= neededXP) {
        updateLevel()
        xp -= neededXP;
        coins += coin_for_level;
        showLevelUpPopup()
        updateUI();
        createLevelUpEffect();
    }
}

function showPopup(elementId, value) {
    const popup = document.getElementById(elementId);
    popup.textContent = `+${formatNumber(value)}`;
    popup.classList.add('show');
    setTimeout(() => {
        popup.classList.remove('show');
    }, 1000);
}

function updateScore(points) {
    score += points;
    scoreElement.textContent = formatNumber(score);
    showPopup('score-popup', points);
}

function updateCoins(coinsAdded) {
    coins += coinsAdded;
    coinsElement.textContent = formatNumber(coins);
    showPopup('coins-popup', coinsAdded);
}

function updateLevel() {
    level++;
    levelElement.textContent = formatNumber(level);
    showPopup('level-popup', 1);
}
tapCircle.addEventListener('touchstart', (event) => {
    touchStartX = event.touches[0].clientX;
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞—Å–∞–Ω–∏—è
tapCircle.addEventListener('touchend', (event) => {
    touchEndX = event.changedTouches[0].clientX;
    handleSwipe();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
tapCircle.addEventListener('click', () => {
    if (tapCircle.classList.contains('flipped')) {
        tapCircle.classList.remove('flipped');
    }
});
function handleSwipe() {
    const swipeDistance = touchEndX - touchStartX;
    const swipeThreshold = 150; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–≤–∞–π–ø–∞

    if (Math.abs(swipeDistance) > swipeThreshold) {
        if (swipeDistance > 0) {
            // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ
            tapCircle.classList.add('flipped');
        } else {
            // –°–≤–∞–π–ø –≤–ª–µ–≤–æ
            tapCircle.classList.add('flipped');
        }
        updateCharacterDescription(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–µ
    }
}

function updateCharacterDescription() {
    const character = getCurrentCharacter();
    const descriptionElement = document.getElementById('character-description');
    if (character && descriptionElement) {
        const descriptionText = `${character.name}\n${character.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}`;
        descriptionElement.innerHTML = descriptionText.replace(/\n/g, '<br>'); // –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ <br>
    }
}
function buyUpgrade(upgradeId) {
    const upgrade = shopConfig.upgrades.find(u => u.id === upgradeId);
    if (!upgrade) {
        showError('–£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        return;
    }

    const currentLevel = getUpgradeLevel(upgradeId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    if (currentLevel >= upgrade.maxLevel) {
        showError('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.');
        return;
    }

    const cost = upgrade.baseCost + (currentLevel * upgrade.costIncrease);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç
    if (coins >= cost) {
        coins -= cost;
        increaseUpgradeLevel(upgradeId); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è
        applyUpgradeEffect(upgrade.effect); // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —É–ª—É—á—à–µ–Ω–∏—è
        updateUI(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    } else {
        showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è.');
    }
}

function getUpgradeLevel(upgradeId) {
    switch (upgradeId) {
        case 'multiplier':
            return multiplierCount || 0;
        case 'auto-click':
            return autoClickerCount || 0;
        case 'critical-hit':
            return criticalHitCount || 0;
        case 'coin-bonus':
            return coinBonusCount || 0;
        case 'xp-boost':
            return xpBoostCount || 0;
        default:
            return 0;
    }
}

function increaseUpgradeLevel(upgradeId) {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è
    switch (upgradeId) {
        case 'multiplier':
            multiplierCount += 1;
            break;
        case 'auto-click':
            autoClickerCount += 1;
            break;
        case 'critical-hit':
            criticalHitCount += 1;
            break;
        case 'coin-bonus':
            coinBonusCount += 1;
            break;
        case 'xp-boost':
            xpBoostCount += 1;
            break;
    }
}

function applyUpgradeEffect(effectType) {
    switch (effectType) {
        case 'multiplier':
            applyMultiplierEffect();
            break;
        case 'autoClicker':
            applyAutoClickerEffect();
            break;
        case 'criticalHit':
            applyCriticalHitEffect();
            break;
        case 'coinBonus':
            applyCoinBonusEffect();
            break;
        case 'xpBoost':
            applyXpBoostEffect();
            break;
        default:
            console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–ª—É—á—à–µ–Ω–∏—è:', effectType);
    }
}

function applyMultiplierEffect() {
    multiplier += 1; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ 1
    console.log(`–ú–Ω–æ–∂–∏—Ç–µ–ª—å —É–≤–µ–ª–∏—á–µ–Ω! –¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${multiplier}`);
}

function applyAutoClickerEffect() {
    if (!autoClickerActive) {
        autoClickerActive = true;
        setInterval(() => {
            score += multiplier;
            coins += multiplier;
            xp += multiplier;

            updateScore(multiplier);
            updateCoins(multiplier);
            checkLevelUp();
            updateUI();

        }, 1000);
        console.log('–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
    }
}

function applyCriticalHitEffect() {
    console.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä —É–ª—É—á—à–µ–Ω! –®–∞–Ω—Å: ${(0.1 + (criticalHitCount * 0.05)) * 100}%, –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x${2 + (criticalHitCount * 0.5)}`);
}

function applyCoinBonusEffect() {
    console.log(`–ë–æ–Ω—É—Å –º–æ–Ω–µ—Ç —É–ª—É—á—à–µ–Ω! –ú–Ω–æ–∂–∏—Ç–µ–ª—å –º–æ–Ω–µ—Ç: x${1 + (coinBonusCount * 0.2)}`);
}

function applyXpBoostEffect() {
    console.log(`–£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ —É–ª—É—á—à–µ–Ω–æ! –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞: x${1 + (xpBoostCount * 0.3)}`);
}

function createCriticalHitEffect(x, y) {
    const effect = document.createElement('div');
    effect.className = 'critical-hit-effect';
    effect.textContent = 'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä!';
    effect.style.left = `${x}px`;
    effect.style.top = `${y}px`;
    document.body.appendChild(effect);
    setTimeout(() => effect.remove(), 1000);
}

function renderShop() {
    const upgradesList = $('#upgrades-list');
    upgradesList.empty(); // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π

    shopConfig.upgrades.forEach(upgrade => {
        const currentLevel = getUpgradeLevel(upgrade.id);
        const cost = upgrade.baseCost + (currentLevel * upgrade.costIncrease);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        const isMaxLevel = currentLevel >= upgrade.maxLevel;

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–ª—É—á—à–µ–Ω–∏—è
        const upgradeElement = $('<div>', {
            class: 'upgrade',
            'data-id': upgrade.id,
            click: () => buyUpgrade(upgrade.id) // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        });

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        upgradeElement.html(`
            <div class="upgrade-header">
                ${upgrade.icon} ${upgrade.name}
                ${isMaxLevel ? '<span class="max-level">MAX</span>' : '<button class="btn buy-btn">–ö—É–ø–∏—Ç—å</button>'}
            </div>
            <div class="upgrade-details">
                –¶–µ–Ω–∞: <span class="upgrade-cost">${isMaxLevel ? '‚Äî' : formatNumber(cost)}</span> ü™ô
                <br>
                –£—Ä–æ–≤–µ–Ω—å: <span class="upgrade-level">${currentLevel}</span> / ${upgrade.maxLevel}
                <br>
                <small>${upgrade.description}</small>
            </div>
        `);

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫
        upgradesList.append(upgradeElement);
    });
}

function openShop() {
    renderShop();
    document.getElementById('shop-modal').style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
}

function showLeaderboard() {
    saveProgress(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –≤–∫–ª—é—á–∞—è selectedCharacterId
    const currentUser = Telegram.WebApp.initDataUnsafe.user; // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUsername = currentUser?.username || 'unknown'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∏–∑ Telegram

    $.ajax({
        url: '/api/leaderboard',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
            const leaderboardList = $('#leaderboard-list');
            leaderboardList.empty();

            if (data.length === 0) {
                leaderboardList.append('<li>–†–µ–∫–æ—Ä–¥—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</li>');
            } else {
                data.forEach((player, index) => {
                    const li = $('<li>');
                    const playerUsername = player.username || 'unknown'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ 'unknown'

                    const usernameLink = $('<a>', {
                        href: `https://t.me/${playerUsername}`,
                        text: `@${playerUsername}`,
                        css: {
                            textDecoration: 'none',
                            color: '#007BFF',
                            cursor: 'pointer'
                        },
                        target: '_blank' // –û—Ç–∫—Ä—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                    });

                    const placeNumber = $('<span>').text(`${index + 1}. `);
                    li.append(placeNumber);

                    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∞–ª–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä—ë—Ö –º–µ—Å—Ç
                    if (index === 0) {
                        li.append($('<span>').text('ü•á '));
                    } else if (index === 1) {
                        li.append($('<span>').text('ü•à '));
                    } else if (index === 2) {
                        li.append($('<span>').text('ü•â '));
                    }

                    li.append(usernameLink);
                    li.append(`: ${formatNumber(player.score)}`);

                    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if (playerUsername === currentUsername) {
                        li.css({
                            backgroundColor: '#2c3e50', // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω
                            fontWeight: 'bold' // –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç
                        });
                    }

                    leaderboardList.append(li);
                });
            }

            $('#leaderboard-modal').show();
        },
        error: function(error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∫–æ—Ä–¥–æ–≤:', error);
            $('#leaderboard-list').html('<li>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∫–æ—Ä–¥—ã.</li>');
            $('#leaderboard-modal').show();
        }
    });
}

function closeLeaderboard() {
    const modal = document.getElementById('leaderboard-modal');
    modal.style.display = 'none';
}

window.onclick = (event) => {
    const leaderboardModal = document.getElementById('leaderboard-modal');
    if (event.target === leaderboardModal) {
        leaderboardModal.style.display = 'none';
    }
};

function saveProgress() {
    const userId = Telegram.WebApp.initDataUnsafe.user?.id || 1;
    const username = Telegram.WebApp.initDataUnsafe.user?.username || 'unknown'; // –ü–æ–ª—É—á–∞–µ–º username
    const gameData = {
        score,
        coins,
        level,
        xp,
        multiplier,
        username,
        multiplierCount,
        autoClickerCount,
        criticalHitCount,
        coinBonusCount,
        xpBoostCount
    };

    localStorage.setItem('gameData', JSON.stringify(gameData));

    $.ajax({
        url: '/api/save',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({ userId, ...gameData }),
        success: function(response) {
            console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', response);
        },
        error: function(error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    });
}

function loadProgress() {
    const localData = localStorage.getItem('gameData');
    if (localData) {
        try {
            const data = JSON.parse(localData);
            score = data.score || 0;
            coins = data.coins || 0;
            level = data.level || 1;
            xp = data.xp || 0;
            multiplier = data.multiplier || 1;
            multiplierCount = data.multiplierCount || 0;
            autoClickerCount = data.autoClickerCount || 0;
            criticalHitCount = data.criticalHitCount || 0;
            coinBonusCount = data.coinBonusCount || 0;
            xpBoostCount = data.xpBoostCount || 0;
            updateUI(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', e);
        }
    }

    const userId = Telegram.WebApp.initDataUnsafe.user?.id;
    if (userId) {
        $.ajax({
            url: `/api/load?userId=${userId}`,
            method: 'GET',
            dataType: 'json',
            success: function(data) {
                if (data) {
                    score = data.score || score;
                    coins = data.coins || coins;
                    level = data.level || level;
                    xp = data.xp || xp;
                    multiplier = data.multiplier || multiplier;
                    multiplierCount = data.multiplierCount || multiplierCount;
                    autoClickerCount = data.autoClickerCount || autoClickerCount;
                    criticalHitCount = data.criticalHitCount || criticalHitCount;
                    coinBonusCount = data.coinBonusCount || coinBonusCount;
                    xpBoostCount = data.xpBoostCount || xpBoostCount;
                    updateUI(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                }
            },
            error: function(error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
            }
        });
    }

    updateImage(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
}


function formatNumber(number) {
    if (number >= 1e12) { // –¢—Ä–∏–ª–ª–∏–æ–Ω—ã
        return (number / 1e12).toFixed(3) + 'T';
    } else if (number >= 1e9) { // –ú–∏–ª–ª–∏–∞—Ä–¥—ã
        return (number / 1e9).toFixed(3) + 'B';
    } else if (number >= 1e6) { // –ú–∏–ª–ª–∏–æ–Ω—ã
        return (number / 1e6).toFixed(3) + 'M';
    } else if (number >= 1e3) { // –¢—ã—Å—è—á–∏
        return (number / 1e3).toFixed(3) + 'K';
    } else {
        return number.toString(); // –ú–µ–Ω—å—à–µ 1000
    }
}
function updateUI() {
    $('#score').text(formatNumber(score));
    $('#coins').text(formatNumber(coins));
    $('#level').text(formatNumber(level));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä


    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω
    shopConfig.upgrades.forEach(upgrade => {
        const currentLevel = getUpgradeLevel(upgrade.id);
        const cost = upgrade.baseCost + (currentLevel * upgrade.costIncrease);

        const upgradeElement = $(`.upgrade[data-id="${upgrade.id}"]`);
        if (upgradeElement.length) {
            upgradeElement.find('.upgrade-cost').text(formatNumber(cost));
            upgradeElement.find('.upgrade-level').text(currentLevel);
        }
    });
}

function createTapEffect(x, y) {
    const effect = document.createElement('div');
    effect.className = 'tap-effect';
    effect.style.left = `${x}px`;
    effect.style.top = `${y}px`;
    document.body.appendChild(effect);
    setTimeout(() => effect.remove(), 1000);
}

function createUpgradeEffect(text, x, y) {
    const effect = document.createElement('div');
    effect.className = 'upgrade-effect';
    effect.textContent = text;
    effect.style.left = `${x}px`;
    effect.style.top = `${y}px`;
    document.body.appendChild(effect);
    setTimeout(() => effect.remove(), 1000);
}

function createLevelUpEffect() {
    const effect = document.createElement('div');
    effect.className = 'level-up-effect';
    effect.textContent = 'üéâ –£—Ä–æ–≤–µ–Ω—å UP!';
    document.body.appendChild(effect);
    setTimeout(() => effect.remove(), 1000);
}

function updateImage() {
    const character = getCurrentCharacter();
    const tapImage = document.getElementById('tap-image');
    const tapSound = document.getElementById('tap-sound');

    tapImage.src = character.image;
    tapSound.src = character.sound;

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –∫—Ä—É–∂–æ–∫ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç
    if (tapCircle.classList.contains('flipped')) {
        updateCharacterDescription();
    }
}

function showNewCharacterPopup(character) {
    const popup = document.createElement('div');
    popup.className = 'level-up-popup';
    popup.innerHTML = `
        <h2>üéâ –ù–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂!</h2>
        <p>${character.name}!</p>
    `;
    document.body.appendChild(popup);
}


function getCharacterForLevel(currentLevel) {
    let unlockedCharacter = null;
    for (const character of configCharacter.characters) {
        if (currentLevel >= character.entryLevel) {
            unlockedCharacter = character;
        } else {
            break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É—Ä–æ–≤–Ω—é
        }
    }
    return unlockedCharacter;
}

function showLevelUpPopup() {
    const popup = document.createElement('div');
    popup.className = 'level-up-popup';
    popup.innerHTML = `
        <h2>üéâ –£—Ä–æ–≤–µ–Ω—å ${level}!</h2>
        <p>+10 –º–æ–Ω–µ—Ç</p>
    `;
    document.body.appendChild(popup);
    setTimeout(() => popup.remove(), 3000);
}

function showError(message) {
    const errorElement = document.getElementById('error-message');
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';

        setTimeout(() => {
            errorElement.style.display = 'none';
        }, 5000);
    }
}

function copyToClipboard(text) {
    navigator.clipboard.writeText(text)
        .then(() => {
            showError('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ.');
        })
        .catch(() => {
            showError('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.');
        });
}

function shareProgress() {
    const user = Telegram.WebApp.initDataUnsafe?.user;
    if (!user) {
        showError('–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.');
        return;
    }

    const shareText = `
üéÆ *–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ Refresher Tapper*:
üî• –°—á–µ—Ç: *${score}*
ü™ô –ú–æ–Ω–µ—Ç—ã: *${coins}*
üìà –£—Ä–æ–≤–µ–Ω—å: *${level}*

üí™ –ü–æ–ø—Ä–æ–±—É–π –ø–æ–±–∏—Ç—å –º–æ–π —Ä–µ–∫–æ—Ä–¥!
üëâ –ü–µ—Ä–µ–π–¥–∏ –≤ –±–æ—Ç–∞: @RefresherTapperBot
    `.trim();

    copyToClipboard(shareText);
}

function openCharacterModal() {
    const characterList = document.getElementById('character-list');
    characterList.innerHTML = '';

    const nextUnlockLevel = configCharacter.characters
        .map(character => character.entryLevel)
        .filter(lvl => lvl > level)
        .sort((a, b) => a - b)[0];

    configCharacter.characters.forEach(character => {
        const characterItem = document.createElement('div');
        characterItem.className = 'character-item';

        if (character.entryLevel <= level) {
            characterItem.innerHTML = `
                <img src="${character.image}" alt="${character.name}">
                <span>${character.name}</span>
            `;
            characterItem.onclick = () => selectCharacter(character);
        } else {
            characterItem.innerHTML = `
                <div class="locked-character"></div>
                <span>???</span>
                <small>–û—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ ${character.entryLevel}</small>
            `;
        }

        characterList.appendChild(characterItem);
    });

    let nextUnlockInfo = document.getElementById('next-unlock-info');
    if (!nextUnlockInfo) {
        nextUnlockInfo = document.createElement('div');
        nextUnlockInfo.id = 'next-unlock-info';
        nextUnlockInfo.className = 'next-unlock';
        document.getElementById('character-modal').appendChild(nextUnlockInfo);
    }

    nextUnlockInfo.textContent = nextUnlockLevel
        ? `–°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ ${nextUnlockLevel}`
        : '–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –æ—Ç–∫—Ä—ã—Ç—ã';

    document.getElementById('character-modal').style.display = 'block';
}


function closeCharacterModal() {
    document.getElementById('character-modal').style.display = 'none';
}

function selectCharacter(character) {
    selectedCharacter = character; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    updateImage(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    closeCharacterModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
}

loadProgress();
updateImage();