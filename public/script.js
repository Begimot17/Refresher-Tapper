let score = 0;
let coins = 0;
let level = 1;
let coin_for_level = 10;
let xp = 0;
let multiplier = 1;
let autoClickerActive = false;
let multiplierCount = 0;
let autoClickerCount = 0;
let criticalHitCount = 0; // –£—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä"
let coinBonusCount = 0;   // –£—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è "–ë–æ–Ω—É—Å –º–æ–Ω–µ—Ç"
let xpBoostCount = 0;
let selectedCharacter = null;
Telegram.WebApp.ready();
Telegram.WebApp.expand();

const tapCircle = document.getElementById('tap-circle');
const scoreElement = document.getElementById('score');
const coinsElement = document.getElementById('coins');
const levelElement = document.getElementById('level');
const config = {
    characters: [
        {
            name: "–ë–æ–≥–¥–∞–Ω",
            entryLevel: 1,
            image: 'images/bogdan.jpg',
            sound: 'sounds/bogdan.m4a',
        },
        {
            name: "–ì–ª–µ–±–∞—Å—Ç–∞",
            entryLevel: 5,
            image: 'images/glebasta.jpg',
            sound: 'sounds/default.mp3',
        },
        {
            name: "–õ—é–±–æ–º–∏—Ä",
            entryLevel: 10,
            image: 'images/lubomir.jpg',
            sound: 'sounds/default.mp3',
        },
        {
            name: "–ì–ª–µ–±–∞—Å—Ç–∞",
            entryLevel: 114,
            image: 'images/glebasta.jpg',
            sound: 'sounds/default.mp3',
        },
        {
            name: "–õ—é–±–æ–º–∏—Ä",
            entryLevel: 161,
            image: 'images/lubomir.jpg',
            sound: 'sounds/default.mp3',
        },
        {
            name: "–ì–ª–µ–±–∞—Å—Ç–∞",
            entryLevel: 2000,
            image: 'images/glebasta.jpg',
            sound: 'sounds/default.mp3',
        },
    ],
    defaultImage: 'images/bogdan.jpg',
    defaultSound: 'sounds/bogdan.m4a',
};
const shopConfig = {
    upgrades: [
        {
            id: 'multiplier',
            name: '–°–∞–º–æ–≥–æ–Ω',
            description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∫–ª–∏–∫–∞. –ß–µ–º –±–æ–ª—å—à–µ —Å–∞–º–æ–≥–æ–Ω–∞, —Ç–µ–º –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ –∏ –º–æ–Ω–µ—Ç!',
            baseCost: 50,
            costIncrease: 50,
            effect: 'multiplier',
            maxLevel: 500,
            icon: 'üç∫',
        },
        {
            id: 'auto-click',
            name: '–í–æ–ª–≥–∞',
            description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∏–∫–∞–µ—Ç –∑–∞ –≤–∞—Å. –í–æ–ª–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —É—Å—Ç–∞–ª–∏, –ø–æ–∫–∞ –≤—ã –æ—Ç–¥—ã—Ö–∞–µ—Ç–µ!',
            baseCost: 100,
            costIncrease: 100,
            effect: 'autoClicker',
            maxLevel: 500,
            icon: 'üèéÔ∏è',
        },
        {
            id: 'critical-hit',
            name: '–ü–æ–¥–∏–∫',
            description: '–®–∞–Ω—Å –Ω–∞–Ω–µ—Å—Ç–∏ –º–æ—â–Ω—ã–π —É–¥–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤ —Ä–∞–∑—ã –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ –∏ –º–æ–Ω–µ—Ç. –ü–æ–¥–∏–∫ ‚Äî —ç—Ç–æ —Å–∏–ª–∞!',
            baseCost: 500,
            costIncrease: 500,
            effect: 'criticalHit',
            maxLevel: 200,
            icon: 'üí•',
        },
        {
            id: 'coin-bonus',
            name: '–ë–∞–∑–∞',
            description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∑–∞ –∫–ª–∏–∫. –ë–∞–∑–∞ ‚Äî —ç—Ç–æ –Ω–∞–¥–µ–∂–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞!',
            baseCost: 10000,
            costIncrease: 2500,
            effect: 'coinBonus',
            maxLevel: 200,
            icon: 'üí∞',
        },
        {
            id: 'xp-boost',
            name: '–°–Ω—é—Å',
            description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –∑–∞ –∫–ª–∏–∫. –°–Ω—é—Å –∑–∞—Ä—è–∂–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —Ä–∞—Å—Ç–∏!',
            baseCost: 25000,
            costIncrease: 10000,
            effect: 'xpBoost',
            maxLevel: 100,
            icon: 'üì¶',
        },
    ],
};
const tapSound = document.getElementById('tap-sound');

tapCircle.addEventListener('click', (event) => {
    tapSound.currentTime = 0;
    tapSound.play();

    const x = event.clientX;
    const y = event.clientY;

    createTapEffect(x, y);

    updateScore(multiplier);
    updateCoins(multiplier);
    xp += multiplier;
    checkLevelUp();
});

function closeShop() {
    document.getElementById('shop-modal').style.display = 'none';
}

function getCurrentCharacter() {
    if (selectedCharacter) {
        return selectedCharacter;
    }
    return getCharacterForLevel(level);
}

function checkLevelUp() {
    const neededXP = level * 100;
    if (xp >= neededXP) {
        updateLevel()
        xp -= neededXP;
        coins += coin_for_level;
        showLevelUpPopup()
        updateUI();
        createLevelUpEffect();
    }
}

function showPopup(elementId, value) {
    const popup = document.getElementById(elementId);
    popup.textContent = `+${value}`;
    popup.classList.add('show');
    setTimeout(() => {
        popup.classList.remove('show');
    }, 1000);
}

function updateScore(points) {
    score += points;
    scoreElement.textContent = formatNumber(score);
    showPopup('score-popup', points);
}

function updateCoins(coinsAdded) {
    coins += coinsAdded;
    coinsElement.textContent = formatNumber(coins);
    showPopup('coins-popup', coinsAdded);
}

function updateLevel() {
    level++;
    levelElement.textContent = formatNumber(level);
    showPopup('level-popup', 1);
}

function buyUpgrade(upgradeId) {
    const upgrade = shopConfig.upgrades.find(u => u.id === upgradeId);
    if (!upgrade) {
        showError('–£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        return;
    }

    const currentLevel = getUpgradeLevel(upgradeId);
    const cost = upgrade.baseCost + (currentLevel * upgrade.costIncrease);

    if (coins >= cost) {
        coins -= cost;
        increaseUpgradeLevel(upgradeId);

        applyUpgradeEffect(upgrade.effect);

        const rect = document.querySelector(`.upgrade[data-id="${upgradeId}"]`).getBoundingClientRect();
        createUpgradeEffect(`${upgrade.icon} ${upgrade.name} —É–ª—É—á—à–µ–Ω!`, rect.left + 50, rect.top);

        updateUI();
    } else {
        showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è.');
    }
}

function getUpgradeLevel(upgradeId) {
    switch (upgradeId) {
        case 'multiplier':
            return multiplierCount || 0;
        case 'auto-click':
            return autoClickerCount || 0;
        case 'critical-hit':
            return criticalHitCount || 0;
        case 'coin-bonus':
            return coinBonusCount || 0;
        case 'xp-boost':
            return xpBoostCount || 0;
        default:
            return 0;
    }
}

function increaseUpgradeLevel(upgradeId) {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è
    switch (upgradeId) {
        case 'multiplier':
            multiplierCount += 1;
            break;
        case 'auto-click':
            autoClickerCount += 1;
            break;
        case 'critical-hit':
            criticalHitCount += 1;
            break;
        case 'coin-bonus':
            coinBonusCount += 1;
            break;
        case 'xp-boost':
            xpBoostCount += 1;
            break;
    }
}

function applyUpgradeEffect(effectType) {
    switch (effectType) {
        case 'multiplier':
            applyMultiplierEffect();
            break;
        case 'autoClicker':
            applyAutoClickerEffect();
            break;
        case 'criticalHit':
            applyCriticalHitEffect();
            break;
        case 'coinBonus':
            applyCoinBonusEffect();
            break;
        case 'xpBoost':
            applyXpBoostEffect();
            break;
        default:
            console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–ª—É—á—à–µ–Ω–∏—è:', effectType);
    }
}

function applyMultiplierEffect() {
    multiplier += 1; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ 1
    console.log(`–ú–Ω–æ–∂–∏—Ç–µ–ª—å —É–≤–µ–ª–∏—á–µ–Ω! –¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${multiplier}`);
}

function applyAutoClickerEffect() {
    if (!autoClickerActive) {
        autoClickerActive = true;
        setInterval(() => {
            score += multiplier;
            coins += multiplier;
            xp += multiplier;

            checkLevelUp();
            updateUI();

        }, 1000);
        console.log('–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
    }
}

function applyCriticalHitEffect() {
    const criticalHitChance = 0.1 + (criticalHitCount * 0.05);
    const criticalHitMultiplier = 2 + (criticalHitCount * 0.5);

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞
    tapCircle.removeEventListener('click', handleTap);
    tapCircle.addEventListener('click', handleTap);

    function handleTap(event) {
        tapSound.currentTime = 0;
        tapSound.play();
        createTapEffect(event.clientX, event.clientY);
        if (Math.random() < criticalHitChance) {
            const criticalScore = multiplier * criticalHitMultiplier;
            const criticalCoins = multiplier * criticalHitMultiplier;
            const criticalXp = multiplier * criticalHitMultiplier;
            updateScore(criticalScore);
            updateCoins(criticalCoins);
            xp += criticalXp;
            createCriticalHitEffect(event.clientX, event.clientY);
        } else {
            updateScore(multiplier);
            updateCoins(multiplier);
            xp += multiplier;
        }

        checkLevelUp();
    }

    console.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä —É–ª—É—á—à–µ–Ω! –®–∞–Ω—Å: ${criticalHitChance * 100}%, –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x${criticalHitMultiplier}`);
}

function applyCoinBonusEffect() {
    const coinBonusMultiplier = 1 + (coinBonusCount * 0.2); // +20% –º–æ–Ω–µ—Ç –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
    tapCircle.removeEventListener('click', handleTap); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    tapCircle.addEventListener('click', handleTap); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π

    function handleTap(event) {
        tapSound.currentTime = 0;
        tapSound.play();
        createTapEffect(event.clientX, event.clientY);
        updateScore(multiplier);
        xp += multiplier;
        const coinsEarned = multiplier * coinBonusMultiplier;
        updateCoins(coinsEarned);

        checkLevelUp();
    }

    console.log(`–ë–æ–Ω—É—Å –º–æ–Ω–µ—Ç —É–ª—É—á—à–µ–Ω! –ú–Ω–æ–∂–∏—Ç–µ–ª—å –º–æ–Ω–µ—Ç: x${coinBonusMultiplier}`);
}

function applyXpBoostEffect() {
    const xpBoostMultiplier = 1 + (xpBoostCount * 0.3); // +30% –æ–ø—ã—Ç–∞ –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å

    tapCircle.removeEventListener('click', handleTap); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    tapCircle.addEventListener('click', handleTap); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π

    function handleTap(event) {
        tapSound.currentTime = 0;
        tapSound.play();
        createTapEffect(event.clientX, event.clientY);
        updateScore(multiplier);
        updateCoins(multiplier);

        const xpEarned = multiplier * xpBoostMultiplier;
        xp += xpEarned;

        checkLevelUp();
    }

    console.log(`–£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ —É–ª—É—á—à–µ–Ω–æ! –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞: x${xpBoostMultiplier}`);
}

function createCriticalHitEffect(x, y) {
    const effect = document.createElement('div');
    effect.className = 'critical-hit-effect';
    effect.textContent = 'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä!';
    effect.style.left = `${x}px`;
    effect.style.top = `${y}px`;
    document.body.appendChild(effect);
    setTimeout(() => effect.remove(), 1000);
}

function renderShop() {
    const upgradesList = document.getElementById('upgrades-list');
    upgradesList.innerHTML = '';

    shopConfig.upgrades.forEach(upgrade => {
        const upgradeElement = document.createElement('div');
        upgradeElement.className = 'upgrade';
        upgradeElement.setAttribute('data-id', upgrade.id);
        upgradeElement.onclick = () => buyUpgrade(upgrade.id);

        const currentLevel = getUpgradeLevel(upgrade.id);
        const cost = upgrade.baseCost + (currentLevel * upgrade.costIncrease);

        upgradeElement.innerHTML = `
            <div class="upgrade-header">
                ${upgrade.icon} ${upgrade.name}
                <button class="btn buy-btn">–ö—É–ø–∏—Ç—å</button>
            </div>
            <div class="upgrade-details">
                –¶–µ–Ω–∞: <span class="upgrade-cost">${formatNumber(cost)}</span> ü™ô
                <br>
                –£—Ä–æ–≤–µ–Ω—å: <span class="upgrade-level">${currentLevel}</span> / ${upgrade.maxLevel}
                <br>
                <small>${upgrade.description}</small>
            </div>
        `;

        upgradesList.appendChild(upgradeElement);
    });
}

function openShop() {
    renderShop();
    document.getElementById('shop-modal').style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
}

function showLeaderboard() {
    fetch('/api/leaderboard')
        .then(response => response.json())
        .then(data => {
            const leaderboardList = document.getElementById('leaderboard-list');
            leaderboardList.innerHTML = '';

            if (data.length === 0) {
                leaderboardList.innerHTML = '<li>–†–µ–∫–æ—Ä–¥—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</li>';
            } else {
                data.forEach((player, index) => {
                    const li = document.createElement('li');
                    const usernameLink = document.createElement('a');

                    usernameLink.href = `https://t.me/${player.username}`;
                    usernameLink.textContent = `@${player.username || 'unknown'}`;
                    usernameLink.style.textDecoration = 'none';
                    usernameLink.style.color = '#007BFF';
                    usernameLink.style.cursor = 'pointer';
                    usernameLink.target = '_blank'; // –û—Ç–∫—Ä—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ

                    const placeNumber = document.createElement('span');
                    placeNumber.textContent = `${index + 1}. `;
                    li.appendChild(placeNumber);

                    if (index === 0) {
                        const goldMedal = document.createElement('span');
                        goldMedal.textContent = 'ü•á ';
                        li.appendChild(goldMedal);
                    } else if (index === 1) {
                        const silverMedal = document.createElement('span');
                        silverMedal.textContent = 'ü•à ';
                        li.appendChild(silverMedal);
                    } else if (index === 2) {
                        const bronzeMedal = document.createElement('span');
                        bronzeMedal.textContent = 'ü•â ';
                        li.appendChild(bronzeMedal);
                    }

                    li.appendChild(usernameLink);
                    li.appendChild(document.createTextNode(`: ${formatNumber(player.score)}`));
                    leaderboardList.appendChild(li);
                });
            }

            const modal = document.getElementById('leaderboard-modal');
            modal.style.display = 'block';
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∫–æ—Ä–¥–æ–≤:', error);
            const leaderboardList = document.getElementById('leaderboard-list');
            leaderboardList.innerHTML = '<li>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∫–æ—Ä–¥—ã.</li>';
            const modal = document.getElementById('leaderboard-modal');
            modal.style.display = 'block';
        });
}

function closeLeaderboard() {
    const modal = document.getElementById('leaderboard-modal');
    modal.style.display = 'none';
}

window.onclick = (event) => {
    const leaderboardModal = document.getElementById('leaderboard-modal');
    if (event.target === leaderboardModal) {
        leaderboardModal.style.display = 'none';
    }
};

function saveProgress() {
    const userId = Telegram.WebApp.initDataUnsafe.user?.id || 1;
    const username = Telegram.WebApp.initDataUnsafe.user?.username || 'unknown'; // –ü–æ–ª—É—á–∞–µ–º username
    const gameData = {
        score,
        coins,
        level,
        xp,
        multiplier,
        username,
        multiplierCount,
        autoClickerCount,
        criticalHitCount,
        coinBonusCount,
        xpBoostCount
    };

    localStorage.setItem('gameData', JSON.stringify(gameData));

    fetch('/api/save', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({userId, ...gameData}), // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º username –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    }).catch(error => console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error));
}

function loadProgress() {
    const localData = localStorage.getItem('gameData');
    if (localData) {
        try {
            const data = JSON.parse(localData);
            score = data.score || 0;
            coins = data.coins || 0;
            level = data.level || 1;
            xp = data.xp || 0;
            multiplier = data.multiplier || 1;
            multiplierCount = data.multiplierCount || 0;
            autoClickerCount = data.autoClickerCount || 0;
            criticalHitCount = data.criticalHitCount || 0;
            coinBonusCount = data.coinBonusCount || 0;
            xpBoostCount = data.xpBoostCount || 0;
            updateUI();
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', e);
        }
    }

    const userId = Telegram.WebApp.initDataUnsafe.user?.id;
    if (userId) {
        fetch(`/api/load?userId=${userId}`)
            .then(response => response.json())
            .then(data => {
                if (data) {
                    score = data.score || score;
                    coins = data.coins || coins;
                    level = data.level || level;
                    xp = data.xp || xp;
                    multiplier = data.multiplier || multiplier;
                    multiplierCount = data.multiplierCount || multiplierCount;
                    autoClickerCount = data.autoClickerCount || autoClickerCount;
                    criticalHitCount = data.criticalHitCount || criticalHitCount;
                    coinBonusCount = data.coinBonusCount || coinBonusCount;
                    xpBoostCount = data.xpBoostCount || xpBoostCount;
                    updateUI();
                }
            })
            .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error));
    }

    updateImage();
}


function formatNumber(number) {
    if (number >= 1000000) {
        return (number / 1000000).toFixed(2) + 'M'; // –ú–∏–ª–ª–∏–æ–Ω—ã
    } else if (number >= 1000) {
        return (number / 1000).toFixed(2) + 'K'; // –¢—ã—Å—è—á–∏
    } else {
        return number.toString(); // –ú–µ–Ω—å—à–µ 1000
    }
}

function updateUI() {
    scoreElement.textContent = formatNumber(score);
    coinsElement.textContent = formatNumber(coins);
    levelElement.textContent = formatNumber(level);

    shopConfig.upgrades.forEach(upgrade => {
        const currentLevel = getUpgradeLevel(upgrade.id);
        const cost = upgrade.baseCost + (currentLevel * upgrade.costIncrease);

        const upgradeElement = document.querySelector(`.upgrade[data-id="${upgrade.id}"]`);
        if (upgradeElement) {
            upgradeElement.querySelector('.upgrade-cost').textContent = formatNumber(cost);
            upgradeElement.querySelector('.upgrade-level').textContent = currentLevel;
        }
    });
}

function createTapEffect(x, y) {
    const effect = document.createElement('div');
    effect.className = 'tap-effect';
    effect.style.left = `${x}px`;
    effect.style.top = `${y}px`;
    document.body.appendChild(effect);
    setTimeout(() => effect.remove(), 1000);
}

function createUpgradeEffect(text, x, y) {
    const effect = document.createElement('div');
    effect.className = 'upgrade-effect';
    effect.textContent = text;
    effect.style.left = `${x}px`;
    effect.style.top = `${y}px`;
    document.body.appendChild(effect);
    setTimeout(() => effect.remove(), 1000);
}

function createLevelUpEffect() {
    const effect = document.createElement('div');
    effect.className = 'level-up-effect';
    effect.textContent = 'üéâ –£—Ä–æ–≤–µ–Ω—å UP!';
    document.body.appendChild(effect);
    setTimeout(() => effect.remove(), 1000);
}

function updateImage() {
    const character = getCurrentCharacter(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const tapImage = document.getElementById('tap-image');
    const tapSound = document.getElementById('tap-sound');

    // –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    tapImage.src = character.image

    tapSound.src = character.sound;
}

function showNewCharacterPopup(character) {
    const popup = document.createElement('div');
    popup.className = 'level-up-popup';
    popup.innerHTML = `
        <h2>üéâ –ù–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂!</h2>
        <p>–¢–µ–ø–µ—Ä—å –≤—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ ${character.name}!</p>
    `;
    document.body.appendChild(popup);
}


function getCharacterForLevel(currentLevel) {
    let unlockedCharacter = null;
    for (const character of config.characters) {
        if (currentLevel >= character.entryLevel) {
            unlockedCharacter = character;
        } else {
            break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É—Ä–æ–≤–Ω—é
        }
    }
    return unlockedCharacter;
}

function showLevelUpPopup() {
    const popup = document.createElement('div');
    popup.className = 'level-up-popup';
    popup.innerHTML = `
        <h2>üéâ –£—Ä–æ–≤–µ–Ω—å ${level}!</h2>
        <p>+10 –º–æ–Ω–µ—Ç</p>
    `;
    document.body.appendChild(popup);
    setTimeout(() => popup.remove(), 3000);
}

function showError(message) {
    const errorElement = document.getElementById('error-message');
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';

        setTimeout(() => {
            errorElement.style.display = 'none';
        }, 5000);
    }
}

function copyToClipboard(text) {
    navigator.clipboard.writeText(text)
        .then(() => {
            showError('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ.');
        })
        .catch(() => {
            showError('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.');
        });
}

function shareProgress() {
    const user = Telegram.WebApp.initDataUnsafe?.user;
    if (!user) {
        showError('–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.');
        return;
    }

    const shareText = `
üéÆ *–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ Refresher Tapper*:
üî• –°—á–µ—Ç: *${score}*
ü™ô –ú–æ–Ω–µ—Ç—ã: *${coins}*
üìà –£—Ä–æ–≤–µ–Ω—å: *${level}*

üí™ –ü–æ–ø—Ä–æ–±—É–π –ø–æ–±–∏—Ç—å –º–æ–π —Ä–µ–∫–æ—Ä–¥!
üëâ –ü–µ—Ä–µ–π–¥–∏ –≤ –±–æ—Ç–∞: @bogdan_tapper_bot
    `.trim();

    copyToClipboard(shareText);
}

function openCharacterModal() {
    const characterList = document.getElementById('character-list');
    characterList.innerHTML = '';

    const nextUnlockLevel = config.characters
        .map(character => character.entryLevel)
        .filter(lvl => lvl > level)
        .sort((a, b) => a - b)[0];

    config.characters.forEach(character => {
        const characterItem = document.createElement('div');
        characterItem.className = 'character-item';

        if (character.entryLevel <= level) {
            characterItem.innerHTML = `
                <img src="${character.image}" alt="${character.name}">
                <span>${character.name}</span>
            `;
            characterItem.onclick = () => selectCharacter(character);
        } else {
            characterItem.innerHTML = `
                <div class="locked-character"></div>
                <span>???</span>
                <small>–û—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ ${character.entryLevel}</small>
            `;
        }

        characterList.appendChild(characterItem);
    });

    let nextUnlockInfo = document.getElementById('next-unlock-info');
    if (!nextUnlockInfo) {
        nextUnlockInfo = document.createElement('div');
        nextUnlockInfo.id = 'next-unlock-info';
        nextUnlockInfo.className = 'next-unlock';
        document.getElementById('character-modal').appendChild(nextUnlockInfo);
    }

    nextUnlockInfo.textContent = nextUnlockLevel
        ? `–°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ ${nextUnlockLevel}`
        : '–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –æ—Ç–∫—Ä—ã—Ç—ã';

    document.getElementById('character-modal').style.display = 'block';
}


function closeCharacterModal() {
    document.getElementById('character-modal').style.display = 'none';
}

function selectCharacter(character) {
    selectedCharacter = character; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    updateImage(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    closeCharacterModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    saveProgress(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –≤–∫–ª—é—á–∞—è selectedCharacterId
}

loadProgress();
updateImage();