let score = 0;
let coins = 0;
let level = 1;
let xp = 0;
let multiplier = 1;
let autoClickerActive = false;
let multiplierCount = 0;
let autoClickerCount = 0;
let selectedCharacter = null;
Telegram.WebApp.ready();
Telegram.WebApp.expand();

const tapCircle = document.getElementById('tap-circle');
const scoreElement = document.getElementById('score');
const coinsElement = document.getElementById('coins');
const levelElement = document.getElementById('level');
const config = {
    characters: [
        {
            name: "–ë–æ–≥–¥–∞–Ω",
            entryLevel: 1,
            image: 'images/bogdan.jpg',
            sound: 'sounds/bogdan.m4a',
        },
        {
            name: "–ì–ª–µ–±–∞—Å—Ç–∞",
            entryLevel: 5,
            image: 'images/glebasta.jpg',
            sound: 'sounds/default.mp3',
        },
        {
            name: "–õ—é–±–æ–º–∏—Ä",
            entryLevel: 10,
            image: 'images/lubomir.jpg',
            sound: 'sounds/default.mp3',
        },
        {
            name: "–ì–ª–µ–±–∞—Å—Ç–∞",
            entryLevel:114,
            image: 'images/glebasta.jpg',
            sound: 'sounds/default.mp3',
        },
        {
            name: "–õ—é–±–æ–º–∏—Ä",
            entryLevel: 146,
            image: 'images/lubomir.jpg',
            sound: 'sounds/default.mp3',
        },
        {
            name: "–ì–ª–µ–±–∞—Å—Ç–∞",
            entryLevel:2000,
            image: 'images/glebasta.jpg',
            sound: 'sounds/default.mp3',
        },
    ],
    defaultImage: 'images/bogdan.jpg',
    defaultSound: 'sounds/bogdan.m4a',
};
const tapSound = document.getElementById('tap-sound');

tapCircle.addEventListener('click', (event) => {
    tapSound.currentTime = 0;
    tapSound.play();

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    const x = event.clientX;
    const y = event.clientY;

    // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–ª–∏–∫–∞
    createTapEffect(x, y);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
    updateScore(multiplier); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    updateCoins(multiplier); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    xp += multiplier;
    checkLevelUp();
    saveProgress();
});
function openShop() {
    document.getElementById('shop-modal').style.display = 'block';
}

function closeShop() {
    document.getElementById('shop-modal').style.display = 'none';
}

function getCurrentCharacter() {
    if (selectedCharacter) {
        return selectedCharacter;
    }
    return getCharacterForLevel(level);
}

function checkLevelUp() {
    const neededXP = level * 100;
    if (xp >= neededXP) {
        level++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        xp -= neededXP;
        coins += 10;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateUI(); // –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å

        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —É—Ä–æ–≤–Ω—è
        createLevelUpEffect();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
        const newCharacter = getCharacterForLevel(level);
        if (newCharacter && (!selectedCharacter || newCharacter.entryLevel > selectedCharacter.entryLevel)) {
            console.log(`–ù–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${newCharacter.name}`);
            showNewCharacterPopup(newCharacter);
            selectedCharacter = newCharacter; // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            updateImage(); // –ú–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        }

        saveProgress();
    }
}
function showPopup(elementId, value) {
    const popup = document.getElementById(elementId);
    popup.textContent = `+${value}`; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    popup.classList.add('show'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏

    // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
        popup.classList.remove('show');
    }, 1000);
}
function updateScore(points) {
    score += points;
    scoreElement.textContent = formatNumber(score);
    showPopup('score-popup', points); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
}
function updateCoins(coinsAdded) {
    coins += coinsAdded;
    coinsElement.textContent = formatNumber(coins);
    showPopup('coins-popup', coinsAdded); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
}
function updateLevel() {
    level++;
    levelElement.textContent = formatNumber(level);
    showPopup('level-popup', 1); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
}
function buyUpgrade(type) {
    let cost;

    if (type === 'multiplier') {
        cost = 50 + (multiplierCount * 50);
        if (coins >= cost) {
            coins -= cost;
            multiplier += 1;
            multiplierCount += 1;

            // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —É–ª—É—á—à–µ–Ω–∏—è
            const rect = document.querySelector('.upgrade').getBoundingClientRect();
            createUpgradeEffect('√ó2 –ú–Ω–æ–∂–∏—Ç–µ–ª—å!', rect.left + 50, rect.top);

            updateUI();
            saveProgress();
        } else {
            showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è.');
        }
    }

    if (type === 'auto-click') {
        cost = 100 + (autoClickerCount * 100);
        if (coins >= cost) {
            coins -= cost;
            autoClickerCount += 1;

            // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —É–ª—É—á—à–µ–Ω–∏—è
            const rect = document.querySelector('.upgrade').getBoundingClientRect();
            createUpgradeEffect('–ê–≤—Ç–æ–∫–ª–∏–∫!', rect.left + 50, rect.top);

            if (!autoClickerActive) {
                autoClickerActive = true;
                setInterval(() => {
                    score += multiplier;
                    coins += multiplier;
                    xp += multiplier;
                    checkLevelUp();
                    updateUI();
                    saveProgress();
                }, 1000);
            }
            updateUI();
        } else {
            showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞.');
        }
    }
}

function showLeaderboard() {
    fetch('/api/leaderboard')
        .then(response => response.json())
        .then(data => {
            const leaderboardList = document.getElementById('leaderboard-list');
            leaderboardList.innerHTML = '';

            if (data.length === 0) {
                leaderboardList.innerHTML = '<li>–†–µ–∫–æ—Ä–¥—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</li>';
            } else {
                data.forEach((player, index) => {
                    const li = document.createElement('li');
                    const usernameLink = document.createElement('a');

                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Telegram
                    usernameLink.href = `https://t.me/${player.username}`;
                    usernameLink.textContent = `@${player.username || 'unknown'}`;
                    usernameLink.style.textDecoration = 'none';
                    usernameLink.style.color = '#007BFF';
                    usernameLink.style.cursor = 'pointer';
                    usernameLink.target = '_blank'; // –û—Ç–∫—Ä—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ

                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞
                    const placeNumber = document.createElement('span');
                    placeNumber.textContent = `${index + 1}. `;
                    li.appendChild(placeNumber);

                    // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –º–µ—Å—Ç
                    if (index === 0) {
                        const goldMedal = document.createElement('span');
                        goldMedal.textContent = 'ü•á ';
                        li.appendChild(goldMedal);
                    } else if (index === 1) {
                        const silverMedal = document.createElement('span');
                        silverMedal.textContent = 'ü•à ';
                        li.appendChild(silverMedal);
                    } else if (index === 2) {
                        const bronzeMedal = document.createElement('span');
                        bronzeMedal.textContent = 'ü•â ';
                        li.appendChild(bronzeMedal);
                    }

                    li.appendChild(usernameLink);
                    li.appendChild(document.createTextNode(`: ${player.score}`));
                    leaderboardList.appendChild(li);
                });
            }

            const modal = document.getElementById('leaderboard-modal');
            modal.style.display = 'block';
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∫–æ—Ä–¥–æ–≤:', error);
            const leaderboardList = document.getElementById('leaderboard-list');
            leaderboardList.innerHTML = '<li>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∫–æ—Ä–¥—ã.</li>';
            const modal = document.getElementById('leaderboard-modal');
            modal.style.display = 'block';
        });
}

function closeLeaderboard() {
    const modal = document.getElementById('leaderboard-modal');
    modal.style.display = 'none';
}

window.onclick = (event) => {
    const leaderboardModal = document.getElementById('leaderboard-modal');
    if (event.target === leaderboardModal) {
        leaderboardModal.style.display = 'none';
    }
};

function saveProgress() {
    const userId = Telegram.WebApp.initDataUnsafe.user?.id || 1;
    const username = Telegram.WebApp.initDataUnsafe.user?.username || 'unknown'; // –ü–æ–ª—É—á–∞–µ–º username
    const gameData = { score, coins, level, xp, multiplier, username, multiplierCount, autoClickerCount }; // –î–æ–±–∞–≤–ª—è–µ–º username –≤ –¥–∞–Ω–Ω—ã–µ

    localStorage.setItem('gameData', JSON.stringify(gameData));

    fetch('/api/save', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId, ...gameData }), // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º username –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    }).catch(error => console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error));
}

function loadProgress() {
    const localData = localStorage.getItem('gameData');
    if (localData) {
        try {
            const data = JSON.parse(localData);
            score = data.score || 0;
            coins = data.coins || 0;
            level = data.level || 1;
            xp = data.xp || 0;
            multiplier = data.multiplier || 1;
            multiplierCount = data.multiplierCount || 0;
            autoClickerCount = data.autoClickerCount || 0;
            updateUI();
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', e);
        }
    }

    const userId = Telegram.WebApp.initDataUnsafe.user?.id;
    if (userId) {
        fetch(`/api/load?userId=${userId}`)
            .then(response => response.json())
            .then(data => {
                if (data) {
                    score = data.score || score;
                    coins = data.coins || coins;
                    level = data.level || level;
                    xp = data.xp || xp;
                    multiplier = data.multiplier || multiplier;
                    multiplierCount = data.multiplierCount || multiplierCount;
                    autoClickerCount = data.autoClickerCount || autoClickerCount;
                    updateUI();
                }
            })
            .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error));
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    updateImage();
}

function buyUpgrade(type) {
    let cost;

    if (type === 'multiplier') {
        cost = 50 + (multiplierCount * 50); // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å + 50 –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        if (coins >= cost) {
            coins -= cost;
            multiplier += 1;
            multiplierCount += 1;
            updateUI();
            saveProgress();
        } else {
            showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è.');
        }
    }

    if (type === 'auto-click') {
        cost = 100 + (autoClickerCount * 100); // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å + 100 –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        if (coins >= cost) {
            coins -= cost;
            autoClickerCount += 1;
            if (!autoClickerActive) {
                autoClickerActive = true;
                setInterval(() => {
                    score += multiplier;
                    coins += multiplier;
                    xp += multiplier;
                    checkLevelUp();
                    updateUI();
                    saveProgress();
                }, 1000);
            }
            updateUI();
            saveProgress();
        } else {
            showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞.');
        }
    }
}

function formatNumber(number) {
    if (number >= 1000000) {
        return (number / 1000000).toFixed(1) + 'M'; // –ú–∏–ª–ª–∏–æ–Ω—ã
    } else if (number >= 1000) {
        return (number / 1000).toFixed(1) + 'K'; // –¢—ã—Å—è—á–∏
    } else {
        return number.toString(); // –ú–µ–Ω—å—à–µ 1000
    }
}

function updateUI() {
    scoreElement.textContent = formatNumber(score);
    coinsElement.textContent = formatNumber(coins);
    levelElement.textContent = formatNumber(level);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—É—á—à–µ–Ω–∏–π
    document.getElementById('multiplier-cost').textContent = formatNumber(50 + (multiplierCount * 50));
    document.getElementById('multiplier-count').textContent = formatNumber(multiplierCount);
    document.getElementById('auto-click-cost').textContent = formatNumber(100 + (autoClickerCount * 100));
    document.getElementById('auto-click-count').textContent = formatNumber(autoClickerCount);
}
function createTapEffect(x, y) {
    const effect = document.createElement('div');
    effect.className = 'tap-effect';
    effect.style.left = `${x}px`;
    effect.style.top = `${y}px`;
    document.body.appendChild(effect);
    setTimeout(() => effect.remove(), 500);
}

function createUpgradeEffect(text, x, y) {
    const effect = document.createElement('div');
    effect.className = 'upgrade-effect';
    effect.textContent = text;
    effect.style.left = `${x}px`;
    effect.style.top = `${y}px`;
    document.body.appendChild(effect);
    setTimeout(() => effect.remove(), 1000);
}

function createLevelUpEffect() {
    const effect = document.createElement('div');
    effect.className = 'level-up-effect';
    effect.textContent = 'üéâ –£—Ä–æ–≤–µ–Ω—å UP!';
    document.body.appendChild(effect);
    setTimeout(() => effect.remove(), 1000);
}
function updateImage() {
    const character = getCurrentCharacter(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const tapImage = document.getElementById('tap-image');
    const tapSound = document.getElementById('tap-sound');

    // –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    tapImage.style.opacity = 0; // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    setTimeout(() => {
        tapImage.src = character.image; // –ú–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        tapImage.style.opacity = 1; // –ü–ª–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    }, 200); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞

    tapSound.src = character.sound;
}

function showNewCharacterPopup(character) {
    const popup = document.createElement('div');
    popup.className = 'level-up-popup';
    popup.innerHTML = `
        <h2>üéâ –ù–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂!</h2>
        <p>–¢–µ–ø–µ—Ä—å –≤—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ ${character.name}!</p>
    `;
    document.body.appendChild(popup);
    setTimeout(() => popup.remove(), 3000);
}

let previousCharacter = null;

function getCharacterForLevel(currentLevel) {
    let unlockedCharacter = null;
    for (const character of config.characters) {
        if (currentLevel >= character.entryLevel) {
            unlockedCharacter = character;
        } else {
            break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É—Ä–æ–≤–Ω—é
        }
    }
    return unlockedCharacter;
}
function showLevelUpPopup() {
    const popup = document.createElement('div');
    popup.className = 'level-up-popup';
    popup.innerHTML = `
        <h2>üéâ –£—Ä–æ–≤–µ–Ω—å ${level}!</h2>
        <p>+10 –º–æ–Ω–µ—Ç</p>
    `;
    document.body.appendChild(popup);
    setTimeout(() => popup.remove(), 3000);
}

function showError(message) {
    const errorElement = document.getElementById('error-message');
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';

        setTimeout(() => {
            errorElement.style.display = 'none';
        }, 5000);
    }
}

function copyToClipboard(text) {
    navigator.clipboard.writeText(text)
        .then(() => {
            showError('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ.');
        })
        .catch(() => {
            showError('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.');
        });
}

function shareProgress() {
    const user = Telegram.WebApp.initDataUnsafe?.user;
    if (!user) {
        showError('–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.');
        return;
    }

    const userId = user.id;
    const username = user.username || 'unknown';

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
    const shareText = `
üéÆ *–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ Refresher Tapper*:
üî• –°—á–µ—Ç: *${score}*
ü™ô –ú–æ–Ω–µ—Ç—ã: *${coins}*
üìà –£—Ä–æ–≤–µ–Ω—å: *${level}*

üí™ –ü–æ–ø—Ä–æ–±—É–π –ø–æ–±–∏—Ç—å –º–æ–π —Ä–µ–∫–æ—Ä–¥!
üëâ –ü–µ—Ä–µ–π–¥–∏ –≤ –±–æ—Ç–∞: @bogdan_tapper_bot
    `.trim(); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

    // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    copyToClipboard(shareText);
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
function openCharacterModal() {
    const characterList = document.getElementById('character-list');
    characterList.innerHTML = '';

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂
    const nextUnlockLevel = config.characters
        .map(character => character.entryLevel)
        .filter(lvl => lvl > level)
        .sort((a, b) => a - b)[0]; // –ë–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π

    config.characters.forEach(character => {
        const characterItem = document.createElement('div');
        characterItem.className = 'character-item';

        if (character.entryLevel <= level) {
            // –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
            characterItem.innerHTML = `
                <img src="${character.image}" alt="${character.name}">
                <span>${character.name}</span>
            `;
            characterItem.onclick = () => selectCharacter(character);
        } else {
            // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
            characterItem.innerHTML = `
                <div class="locked-character"></div>
                <span>???</span>
                <small>–û—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ ${character.entryLevel}</small>
            `;
        }

        characterList.appendChild(characterItem);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–≤–Ω–µ, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º
    let nextUnlockInfo = document.getElementById('next-unlock-info');
    if (!nextUnlockInfo) {
        nextUnlockInfo = document.createElement('div');
        nextUnlockInfo.id = 'next-unlock-info';
        nextUnlockInfo.className = 'next-unlock';
        document.getElementById('character-modal').appendChild(nextUnlockInfo);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–≤–Ω–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    nextUnlockInfo.textContent = nextUnlockLevel
        ? `–°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ ${nextUnlockLevel}`
        : '–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –æ—Ç–∫—Ä—ã—Ç—ã';

    document.getElementById('character-modal').style.display = 'block';
}





// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeCharacterModal() {
    document.getElementById('character-modal').style.display = 'none';
}

// –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
function selectCharacter(character) {
    selectedCharacter = character; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    updateImage(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    closeCharacterModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
}
loadProgress();
updateImage();